<?php
$this->config["settings_version"] = '1.1';
$this->config["date_format"] = '%m-%d-%Y';
$this->config["time_format"] = '%H:%M';
$this->config["server_offset_time"] = '0';
$this->config["server_protocol"] = 'http';
$this->config["manager_language"] = 'slovak';
$this->config["etomite_charset"] = 'UTF-8';
$this->config["site_name"] = 'My Etomite Site';
$this->config["site_start"] = '1';
$this->config["error_page"] = '3';
$this->config["site_status"] = '1';
$this->config["site_unavailable_message"] = 'The site is currently unavailable';
$this->config["track_visitors"] = '1';
$this->config["resolve_hostnames"] = '1';
$this->config["top_howmany"] = '10';
$this->config["default_template"] = '1';
$this->config["publish_default"] = '1';
$this->config["search_default"] = '1';
$this->config["cache_default"] = '1';
$this->config["syncsitecheck_default"] = '1';
$this->config["showinmenu_default"] = '1';
$this->config["friendly_urls"] = '0';
$this->config["friendly_url_prefix"] = 'p_';
$this->config["friendly_url_suffix"] = '.html';
$this->config["friendly_alias_urls"] = '0';
$this->config["use_udperms"] = '0';
$this->config["use_uvperms"] = '0';
$this->config["access_denied_message"] = '';
$this->config["udperms_allowroot"] = '0';
$this->config["use_mgr_logging"] = '1';
$this->config["max_attempts"] = '3';
$this->config["use_captcha"] = '0';
$this->config["captcha_words"] = 'Array,BitCode,Chunk,Document,Etomite,Forum,Index,Javascript,Keyword,MySQL,Parser,Query,Random,Snippet,Template,Website';
$this->config["signupemail_message"] = 'Hi! 

Here are your login details for Etomite:

Username: %s
Password: %s

Once you log into Etomite, you can change your password.

Regards,
The Management';
$this->config["emailsender"] = 'you@yourdomain.com';
$this->config["emailsubject"] = 'Your Etomite login details';
$this->config["number_of_logs"] = '100';
$this->config["number_of_messages"] = '30';
$this->config["show_doc_data_preview"] = '1';
$this->config["use_doc_editor"] = '1';
$this->config["which_editor"] = '6';
$this->config["strict_editor"] = '1';
$this->config["strip_base_href"] = '1';
$this->config["cm_plugin"] = '0';
$this->config["to_plugin"] = '0';
$this->config["xp_Stylist"] = '0';
$this->config["xp_Stylist_path"] = 'http://127.0.0.1/e/assets/site/example.css';
$this->config["im_plugin"] = '1';
$this->config["im_plugin_base_dir"] = '';
$this->config["im_plugin_base_url"] = 'http://127.0.0.1/e/assets/images/';
$this->config["fm_plugin"] = '1';
$this->config["fm_plugin_base_url"] = 'http://127.0.0.1/e';
$this->config["fm_plugin_document_url"] = 'http://127.0.0.1/e/assets/documents';
$this->config["fm_path"] = '/assets/documents';
$this->config["fm_exclude"] = '.,..,cgi-bin,aspnet_client,index.php,index.html';
$this->config["fm_upload_files"] = 'jpg,gif,png,ico,txt,php,html,htm,xml,js,css,cache,zip,gz,rar,z,tgz,tar,htaccess,bmp,mp3,wav,au,wmv,avi,mpg,mpeg,pdf,psd';
$this->config["tiny_css_path"] = '';
$this->config["tiny_css_selectors"] = '';
$this->config["use_code_editor"] = '0';
$this->config["code_highlight"] = '0';
$this->config["dumpSQL"] = '0';
$this->config["dumpSnippets"] = '0';
$this->config["allow_embedded_php"] = '0';
$this->config["strip_image_paths"] = '0';
$this->config["filemanager_path"] = '';
$this->config["upload_files"] = 'jpg,gif,png,ico,txt,php,html,htm,xml,js,css,cache,zip,gz,rar,z,tgz,tar,htaccess,bmp,mp3,wav,au,wmv,avi,mpg,mpeg,pdf,psd';
$this->config["inlineview_files"] = 'txt,php,html,htm,xml,js,css';
$this->config["view_files"] = 'jpg,gif,png,ico';
$this->config["edit_files"] = 'txt,php,html,htm,xml,js,css';
$this->config["exclude_paths"] = '.,..,cgi-bin,manager';
$this->config["maxuploadsize"] = '';
$this->config["useNotice"] = '1';
$this->config["manager_layout"] = '1';
$this->documentListing["home"] = 1;
$this->aliasListing[] = array('id'=>1,'alias'=>'home','template'=>1,'parent'=>0,'authenticate'=>0);
$this->aliasListing[] = array('id'=>2,'alias'=>'','template'=>1,'parent'=>0,'authenticate'=>0);
$this->documentListing["http404"] = 3;
$this->aliasListing[] = array('id'=>3,'alias'=>'http404','template'=>1,'parent'=>2,'authenticate'=>0);
$this->documentListing["search"] = 4;
$this->aliasListing[] = array('id'=>4,'alias'=>'search','template'=>1,'parent'=>2,'authenticate'=>0);
$this->documentListing["etomite-forums"] = 5;
$this->aliasListing[] = array('id'=>5,'alias'=>'etomite-forums','template'=>0,'parent'=>33,'authenticate'=>0);
$this->documentListing["stats"] = 6;
$this->aliasListing[] = array('id'=>6,'alias'=>'stats','template'=>1,'parent'=>2,'authenticate'=>0);
$this->documentListing["installed"] = 7;
$this->aliasListing[] = array('id'=>7,'alias'=>'installed','template'=>1,'parent'=>8,'authenticate'=>0);
$this->documentListing["news"] = 8;
$this->aliasListing[] = array('id'=>8,'alias'=>'news','template'=>1,'parent'=>0,'authenticate'=>0);
$this->documentListing["what-next"] = 9;
$this->aliasListing[] = array('id'=>9,'alias'=>'what-next','template'=>1,'parent'=>8,'authenticate'=>0);
$this->documentListing["help-and-support"] = 10;
$this->aliasListing[] = array('id'=>10,'alias'=>'help-and-support','template'=>1,'parent'=>8,'authenticate'=>0);
$this->documentListing["contribute"] = 11;
$this->aliasListing[] = array('id'=>11,'alias'=>'contribute','template'=>1,'parent'=>8,'authenticate'=>0);
$this->documentListing["doc-tags"] = 12;
$this->aliasListing[] = array('id'=>12,'alias'=>'doc-tags','template'=>1,'parent'=>20,'authenticate'=>0);
$this->documentListing["new-e"] = 13;
$this->aliasListing[] = array('id'=>13,'alias'=>'new-e','template'=>1,'parent'=>13,'authenticate'=>0);
$this->aliasListing[] = array('id'=>14,'alias'=>'','template'=>1,'parent'=>2,'authenticate'=>0);
$this->documentListing["site-map"] = 15;
$this->aliasListing[] = array('id'=>15,'alias'=>'site-map','template'=>1,'parent'=>0,'authenticate'=>0);
$this->documentListing["google-sitemap"] = 16;
$this->aliasListing[] = array('id'=>16,'alias'=>'google-sitemap','template'=>2,'parent'=>2,'authenticate'=>0);
$this->aliasListing[] = array('id'=>17,'alias'=>'','template'=>1,'parent'=>0,'authenticate'=>0);
$this->aliasListing[] = array('id'=>18,'alias'=>'','template'=>1,'parent'=>21,'authenticate'=>0);
$this->aliasListing[] = array('id'=>19,'alias'=>'','template'=>1,'parent'=>21,'authenticate'=>0);
$this->documentListing["resources"] = 20;
$this->aliasListing[] = array('id'=>20,'alias'=>'resources','template'=>1,'parent'=>0,'authenticate'=>0);
$this->documentListing["Test"] = 21;
$this->aliasListing[] = array('id'=>21,'alias'=>'Test','template'=>1,'parent'=>23,'authenticate'=>0);
$this->documentListing["overview"] = 22;
$this->aliasListing[] = array('id'=>22,'alias'=>'overview','template'=>1,'parent'=>21,'authenticate'=>0);
$this->documentListing["child-document"] = 23;
$this->aliasListing[] = array('id'=>23,'alias'=>'child-document','template'=>1,'parent'=>21,'authenticate'=>0);
$this->aliasListing[] = array('id'=>24,'alias'=>'','template'=>1,'parent'=>8,'authenticate'=>0);
$this->documentListing["third-level-page"] = 25;
$this->aliasListing[] = array('id'=>25,'alias'=>'third-level-page','template'=>1,'parent'=>23,'authenticate'=>0);
$this->documentListing["fourth-level-page"] = 26;
$this->aliasListing[] = array('id'=>26,'alias'=>'fourth-level-page','template'=>1,'parent'=>26,'authenticate'=>0);
$this->documentListing["chunks"] = 27;
$this->aliasListing[] = array('id'=>27,'alias'=>'chunks','template'=>1,'parent'=>20,'authenticate'=>0);
$this->documentListing["system-tags"] = 28;
$this->aliasListing[] = array('id'=>28,'alias'=>'system-tags','template'=>1,'parent'=>20,'authenticate'=>0);
$this->aliasListing[] = array('id'=>29,'alias'=>'','template'=>1,'parent'=>31,'authenticate'=>0);
$this->documentListing["sideBanner2"] = 30;
$this->aliasListing[] = array('id'=>30,'alias'=>'sideBanner2','template'=>1,'parent'=>20,'authenticate'=>0);
$this->documentListing["snippets"] = 31;
$this->aliasListing[] = array('id'=>31,'alias'=>'snippets','template'=>1,'parent'=>20,'authenticate'=>0);
$this->aliasListing[] = array('id'=>32,'alias'=>'','template'=>1,'parent'=>20,'authenticate'=>0);
$this->documentListing["links"] = 33;
$this->aliasListing[] = array('id'=>33,'alias'=>'links','template'=>1,'parent'=>0,'authenticate'=>0);
$this->documentListing["chunk-html-example"] = 34;
$this->aliasListing[] = array('id'=>34,'alias'=>'chunk-html-example','template'=>1,'parent'=>27,'authenticate'=>0);
$this->documentListing["chunk-javascript-example"] = 35;
$this->aliasListing[] = array('id'=>35,'alias'=>'chunk-javascript-example','template'=>1,'parent'=>27,'authenticate'=>0);
$this->documentListing["fix-inert-tags"] = 36;
$this->aliasListing[] = array('id'=>36,'alias'=>'fix-inert-tags','template'=>1,'parent'=>27,'authenticate'=>0);
$this->documentListing["etomite-documentation"] = 37;
$this->aliasListing[] = array('id'=>37,'alias'=>'etomite-documentation','template'=>0,'parent'=>33,'authenticate'=>0);
$this->documentListing["etomite-home"] = 38;
$this->aliasListing[] = array('id'=>38,'alias'=>'etomite-home','template'=>0,'parent'=>33,'authenticate'=>0);
$this->documentListing["templates"] = 39;
$this->aliasListing[] = array('id'=>39,'alias'=>'templates','template'=>1,'parent'=>20,'authenticate'=>0);
$this->documentListing["api-functions"] = 40;
$this->aliasListing[] = array('id'=>40,'alias'=>'api-functions','template'=>1,'parent'=>20,'authenticate'=>0);
$this->aliasListing[] = array('id'=>41,'alias'=>'','template'=>1,'parent'=>0,'authenticate'=>0);
$this->contentTypes[1]='text/html';
$this->contentTypes[2]='text/html';
$this->contentTypes[3]='text/html';
$this->contentTypes[4]='text/html';
$this->contentTypes[5]='text/html';
$this->contentTypes[6]='text/html';
$this->contentTypes[7]='text/html';
$this->contentTypes[8]='text/html';
$this->contentTypes[9]='text/html';
$this->contentTypes[10]='text/html';
$this->contentTypes[11]='text/html';
$this->contentTypes[12]='text/html';
$this->contentTypes[13]='text/html';
$this->contentTypes[14]='text/html';
$this->contentTypes[15]='text/html';
$this->contentTypes[16]='text/xml';
$this->contentTypes[17]='text/html';
$this->contentTypes[18]='text/html';
$this->contentTypes[19]='text/html';
$this->contentTypes[20]='text/html';
$this->contentTypes[21]='text/html';
$this->contentTypes[22]='text/html';
$this->contentTypes[23]='text/html';
$this->contentTypes[24]='text/html';
$this->contentTypes[25]='text/html';
$this->contentTypes[26]='text/html';
$this->contentTypes[27]='text/html';
$this->contentTypes[28]='text/html';
$this->contentTypes[29]='text/html';
$this->contentTypes[30]='text/html';
$this->contentTypes[31]='text/html';
$this->contentTypes[32]='text/html';
$this->contentTypes[33]='text/html';
$this->contentTypes[34]='text/html';
$this->contentTypes[35]='text/html';
$this->contentTypes[36]='text/html';
$this->contentTypes[37]='text/html';
$this->contentTypes[38]='text/html';
$this->contentTypes[39]='text/html';
$this->contentTypes[40]='text/html';
$this->contentTypes[41]='text/html';
$this->tpl_list[]=1;
$this->tpl_list[]=2;
$this->chunkCache['W3C Validation']='PHAgY2xhc3M9InRleHRjZW50ZXIiPg0KICAgIDxhIGhyZWY9Imh0dHA6Ly92YWxpZGF0b3IudzMub3JnL2NoZWNrP3VyaT1yZWZlcmVyIg0KICAgICAgICBvbmNsaWNrPSJ3aW5kb3cub3BlbignaHR0cDovL3ZhbGlkYXRvci53My5vcmcvY2hlY2s/dXJpPXJlZmVyZXInKTsgcmV0dXJuIGZhbHNlOyI+PGltZw0KICAgICAgICBzcmM9Imh0dHA6Ly93d3cudzMub3JnL0ljb25zL3ZhbGlkLXhodG1sMTAiDQogICAgICAgIGFsdD0iVmFsaWQgWEhUTUwgMS4wIFN0cmljdCIgaGVpZ2h0PSIzMSIgd2lkdGg9Ijg4IiAvPg0KICAgIDwvYT4NCiAgICA8YSBocmVmPSJodHRwOi8vamlnc2F3LnczLm9yZy9jc3MtdmFsaWRhdG9yL2NoZWNrL3JlZmVyZXIiDQogICAgICAgIG9uY2xpY2s9IndpbmRvdy5vcGVuKCdodHRwOi8vamlnc2F3LnczLm9yZy9jc3MtdmFsaWRhdG9yL2NoZWNrL3JlZmVyZXInKTsgcmV0dXJuIGZhbHNlOyI+DQogICAgICAgIDxpbWcgc3R5bGU9ImJvcmRlcjowO3dpZHRoOjg4cHg7aGVpZ2h0OjMxcHgiDQogICAgICAgICAgICBzcmM9Imh0dHA6Ly9qaWdzYXcudzMub3JnL2Nzcy12YWxpZGF0b3IvaW1hZ2VzL3Zjc3MiDQogICAgICAgICAgICBhbHQ9IlZhbGlkIENTUyEiIC8+DQogICAgPC9hPg0KPC9wPg==';
$this->chunkCache['Javascript Example']='PHNwYW4gaWQ9IkpTRXhhbXBsZSI+PC9zcGFuPg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQo8IS0tDQogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdKU0V4YW1wbGUnKS5pbm5lckhUTUwgPSAiWypkZXNjcmlwdGlvbipdIjsNCi8vLS0+DQo8L3NjcmlwdD4NCg==';
$this->chunkCache['FixInertTags']='PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KPCEtLQ0KDQpmdW5jdGlvbiBGaXhJbmVydFRhZ3ModCkNCnsNCiAgLyoNCiAgQ3JlYXRlZDogMjAwOC0wNC0xOCBieSBSYWxwaCBBLiBEYWhsZ3Jlbg0KICBQdXJwb3NlOiBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIGluZXJ0IHRhZ3MsIGNvbnRhaW5pbmcgdW4tbmF0dXJhbCBzcGFjZXMsDQogIHdoaWNoIGhhdmUgYmVlbiBlbnRlcmVkIGZvciBkZW1vbnN0YXRpb24gcHVycG9zZXMsIGludG8gbmF0dXJhbCBsb29raW5nDQogIGluZXJ0IHRhZ3MgYnkgdXNpbmcgYSBibGFuayBpbWFnZS4NCiAgKi8NCiAgDQogIC8vIGNoZWNrIHRvIHNlZSBpZiBhbiBlbGVtZW50IGlkIHdhcyBzZW50DQogIGlmKHQgIT0gbnVsbCkNCiAgew0KICAgIC8vIGlmIGFuIGlkIHdhcyBzZW50LCB1c2UgdGhhdCBlbGVtZW50DQogICAgdmFyIGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KTsNCiAgfQ0KICBlbHNlDQogIHsNCiAgICAvLyBpZiBubyBpZCB3YXMgc2VudCwgdXNlIHRoZSBib2R5IGVsZW1lbnQNCiAgICB2YXIgZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07DQogIH0NCg0KICAvLyBmZXRjaCB0aGUgZWxlbWVudCBjb250ZW50cw0KICB2YXIgcyA9IGUuaW5uZXJIVE1MOw0KDQogIC8vIGRlZmluZSB0aGUgYmxhbmsgaW1hZ2UgdG8gdXNlLCB3aXRoIHdpZHRoIGFuZCBoZWlnaHQgc2V0IHRvIHplcm8NCiAgdmFyIGIgPSAnPGltZyBzcmM9Im1hbmFnZXIvbWVkaWEvaW1hZ2VzL2JsYW5rLnBuZyIgc3R5bGU9IndpZHRoOjA7IGhlaWdodDowOyIgYWx0PSJibGFuayIvPic7DQoNCiAgLy8gcGVyZm9ybSBzZXF1ZW50aWFsIHJlcGxhY2VtZW50cw0KICBzID0gcy5yZXBsYWNlKC9cWyBcIS9nLCAnWycrYisnIScpOw0KICBzID0gcy5yZXBsYWNlKC9cISBcXS9nLCAnIScrYisnXScpOw0KICBzID0gcy5yZXBsYWNlKC9cWyBcWy9nLCAnWycrYisnWycpOw0KICBzID0gcy5yZXBsYWNlKC9cXSBcXS9nLCAnXScrYisnXScpOw0KICBzID0gcy5yZXBsYWNlKC9ceyBcey9nLCAneycrYisneycpOw0KICBzID0gcy5yZXBsYWNlKC9cfSBcfS9nLCAnfScrYisnfScpOw0KICBzID0gcy5yZXBsYWNlKC9cWyBcKi9nLCAnWycrYisnKicpOw0KICBzID0gcy5yZXBsYWNlKC9cKiBcXS9nLCAnKicrYisnXScpOw0KICBzID0gcy5yZXBsYWNlKC9cWyBcKC9nLCAnWycrYisnKCcpOw0KICBzID0gcy5yZXBsYWNlKC9cKSBcXS9nLCAnKScrYisnXScpOw0KICBzID0gcy5yZXBsYWNlKC9cWyBcfi9nLCAnWycrYisnficpOw0KICBzID0gcy5yZXBsYWNlKC9cfiBcXS9nLCAnficrYisnXScpOw0KICBzID0gcy5yZXBsYWNlKC9ceyBcIS9nLCAneycrYisnIScpOw0KICBzID0gcy5yZXBsYWNlKC9cISBcfS9nLCAnIScrYisnfScpOw0KICBzID0gcy5yZXBsYWNlKC9cWyBcXi9nLCAnWycrYisnXicpOw0KICBzID0gcy5yZXBsYWNlKC9cXiBcXS9nLCAnXicrYisnXScpOw0KDQogIC8vIHdyaXRlIG1vZGlmaWVkIGNvbnRlbnRzIGJhY2sgdG8gZWxlbWVudA0KICBlLmlubmVySFRNTCA9IHM7DQp9DQoNCi8vIGNhbGwgdGhlIGZpeEluZXJ0VGFncyBmdW5jdGlvbg0KRml4SW5lcnRUYWdzKCk7DQoNCi8vLS0+DQo8L3NjcmlwdD4=';
$this->snippetCache['PoweredBy']='Ly8gU25pcHBldCBuYW1lOiBQb3dlcmVkQnkNCi8vIFNuaXBwZXQgZGVzY3JpcHRpb246IEEgbGl0dGxlIGxpbmsgdG8gRXRvbWl0ZS4NCi8vIFJldmlzaW9uOiAxLjAwIHNoaXBzIHdpdGggRXRvbWl0ZSAwLjYuMS1GaW5hbA0KDQokdmVyc2lvbiA9ICRldG9taXRlLT5nZXRWZXJzaW9uRGF0YSgpOw0KcmV0dXJuICc8YSBocmVmPSJodHRwOi8vd3d3LmV0b21pdGUuY29tIiB0aXRsZT0iRXRvbWl0ZSBXZWJzaXRlIj5Qb3dlcmVkIGJ5IEV0b21pdGUgPGI+Jy4kdmVyc2lvblsndmVyc2lvbiddLiR2ZXJzaW9uWydwYXRjaF9sZXZlbCddLic8L2I+IDxpPignLiR2ZXJzaW9uWydjb2RlX25hbWUnXS4nKTwvaT4uPC9hPic7';
$this->snippetCache['PageTrail']='Ly8gU25pcHBldCBuYW1lOiBQYWdlVHJhaWwNCi8vIFNuaXBwZXQgZGVzY3JpcHRpb246IE91dHB1dHMgdGhlIHBhZ2UgdHJhaWwsIGJhc2VkIG9uIEJpbGwgV2lsc29uJ3Mgc2NyaXB0DQovLyBSZXZpc2lvbjogMS4wMCBzaGlwcyB3aXRoIEV0b21pdGUgMC42LjEtRmluYWwNCg0KJHNlcCA9ICIgJnJhcXVvOyAiOw0KDQovLyBlbmQgY29uZmlnDQokcHRhcnIgPSBhcnJheSgpOw0KJHBpZCA9ICRldG9taXRlLT5kb2N1bWVudE9iamVjdFsncGFyZW50J107DQokcHRhcnJbXSA9ICI8YSBocmVmPSdbfiIuJGV0b21pdGUtPmRvY3VtZW50T2JqZWN0WydpZCddLiJ+XSc+Ii4kZXRvbWl0ZS0+ZG9jdW1lbnRPYmplY3RbJ3BhZ2V0aXRsZSddLiI8L2E+IjsNCg0Kd2hpbGUgKCRwYXJlbnQ9JGV0b21pdGUtPmdldFBhcmVudCgkcGlkKSkgew0KICAgICRwdGFycltdID0gIjxhIGhyZWY9J1t+Ii4kcGFyZW50WydpZCddLiJ+XSc+Ii4kcGFyZW50WydwYWdldGl0bGUnXS4iPC9hPiI7DQogICAgJHBpZCA9ICRwYXJlbnRbJ3BhcmVudCddOw0KfQ0KDQokcHRhcnIgPSBhcnJheV9yZXZlcnNlKCRwdGFycik7DQpyZXR1cm4gam9pbigkcHRhcnIsICRzZXApOw==';
$this->snippetCache['SearchForm']='Ly8gU25pcHBldCBuYW1lOiBTZWFyY2hGb3JtDQovLyBTbmlwcGV0IGRlc2NyaXB0aW9uOiBBbGwtaW4tb25lIHNuaXBwZXQgdG8gc2VhcmNoIHRoZSBzaXRlDQovLyBSZXZpc2lvbjogMS4xIHNoaXBzIHdpdGggRXRvbWl0ZSAwLjYuMS1GaW5hbA0KDQokc2VhcmNoU3RyaW5nID0gDQppc3NldCgkX1BPU1RbJ3NlYXJjaCddKSAmJiANCiRfUE9TVFsnc2VhcmNoJ10hPSAie3siICYmIA0KJF9QT1NUWydzZWFyY2gnXSE9ICJbWyIgJiYgDQokX1BPU1RbJ3NlYXJjaCddIT0gIlsoIiAmJiANCiRfUE9TVFsnc2VhcmNoJ10hPSAiW34iICYmIA0KJF9QT1NUWydzZWFyY2gnXSE9ICJbKiIgPw0KJF9QT1NUWydzZWFyY2gnXSA6ICIiIDsNCg0KDQokU2VhcmNoRm9ybSAuPSAnPGZvcm0gbmFtZT0iU2VhcmNoRm9ybSIgYWN0aW9uPSIiIG1ldGhvZD0icG9zdCI+Jy4iXG4iOyANCiRTZWFyY2hGb3JtIC49ICc8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ic2VhcmNoIiBjbGFzcz0idGV4dCIgdmFsdWU9IicuJHNlYXJjaFN0cmluZy4nIiAvPjxiciAvPicuIlxuIjsgDQokU2VhcmNoRm9ybSAuPSAnPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0ic3ViIiBjbGFzcz0iYnV0dG9uIiB2YWx1ZT0iU2VhcmNoIiAvPicuIlxuIjsgDQokU2VhcmNoRm9ybSAuPSAnPC9mb3JtPic7IA0KDQppZihpc3NldCgkX1BPU1RbJ3NlYXJjaCddKSAmJiAkX1BPU1RbJ3NlYXJjaCddIT0nJykgeyANCiAgICRzZWFyY2ggPSBleHBsb2RlKCIgIiwgJF9QT1NUWydzZWFyY2gnXSk7IA0KICAgJHRibCA9ICRldG9taXRlLT5kYkNvbmZpZ1snZGJhc2UnXS4iLiIuJGV0b21pdGUtPmRiQ29uZmlnWyd0YWJsZV9wcmVmaXgnXS4ic2l0ZV9jb250ZW50IjsNCiAgICRzcWwgPSAiU0VMRUNUIGlkLCBwYWdldGl0bGUsIHBhcmVudCwgZGVzY3JpcHRpb24gRlJPTSAkdGJsIFdIRVJFICgkdGJsLmNvbnRlbnQgTElLRSAnJSIuJHNlYXJjaFswXS4iJSciOyANCiAgIGZvciAoJHg9MTskeCA8IGNvdW50KCRzZWFyY2gpOyAkeCsrKSB7IA0KICAgICAgICRzcWwgLj0gIiBBTkQgJHRibC5jb250ZW50IGxpa2UgJyUkc2VhcmNoWyR4XSUnIjsgDQogICB9IA0KICAgJHNxbCAuPSAiIE9SICR0YmwucGFnZXRpdGxlIExJS0UgJyUiLiRzZWFyY2hbMF0uIiUnICI7IA0KICAgZm9yICgkeD0xOyR4IDwgY291bnQoJHNlYXJjaCk7ICR4KyspIHsgDQogICAgICAgJHNxbCAuPSAiIEFORCAkdGJsLnBhZ2V0aXRsZSBsaWtlICclJHNlYXJjaFskeF0lJyI7IA0KICAgfSANCiAgICRzcWwgLj0gIiBPUiAkdGJsLmRlc2NyaXB0aW9uIExJS0UgJyUiLiRzZWFyY2hbMF0uIiUnICI7IA0KICAgZm9yICgkeD0xOyR4IDwgY291bnQoJHNlYXJjaCk7ICR4KyspIHsgDQogICAgICAgJHNxbCAuPSAiIEFORCAkdGJsLmRlc2NyaXB0aW9uIGxpa2UgJyUkc2VhcmNoWyR4XSUnIjsgDQogICB9IA0KICAgJHNxbCAuPSAiKSBBTkQgJHRibC5wdWJsaXNoZWQgPSAxIEFORCAkdGJsLnNlYXJjaGFibGU9MSBBTkQgJHRibC5kZWxldGVkPTA7IjsgDQogICAkcnMgPSAkZXRvbWl0ZS0+ZGJRdWVyeSgkc3FsKTsgDQogICAkbGltaXQgPSAkZXRvbWl0ZS0+cmVjb3JkQ291bnQoJHJzKTsgDQogICBpZigkbGltaXQ+MCkgeyANCiAgICAgICRTZWFyY2hGb3JtIC49ICI8cD5UaGUgZm9sbG93aW5nIHJlc3VsdHMgd2VyZSBmb3VuZDo8L3A+XG4iOw0KICAgICAgJFNlYXJjaEZvcm0gLj0gIjx0YWJsZSBjZWxsc3BhY2luZz1cIjBcIiBjZWxscGFkZGluZz1cIjBcIj5cbiI7IA0KICAgICAgZm9yICgkeSA9IDA7ICR5IDwgJGxpbWl0OyAkeSsrKSB7IA0KICAgICAgICAgJFNlYXJjaEZvcm1zcmM9JGV0b21pdGUtPmZldGNoUm93KCRycyk7IA0KICAgICAgICAgJFNlYXJjaEZvcm0uPSI8dHI+PHRkIHN0eWxlPVwicGFkZGluZzogMXB4XCI+PGEgaHJlZj1cIlt+Ii4kU2VhcmNoRm9ybXNyY1snaWQnXS4ifl1cIj48Yj4iLiRTZWFyY2hGb3Jtc3JjWydwYWdldGl0bGUnXS4iPC9iPjwvYT48L3RkPlxuIjsNCiAgICAgICAgICRTZWFyY2hGb3JtLj0iPHRkIHN0eWxlPVwicGFkZGluZzogMXB4XCI+IjsgDQogICAgICAgICAkU2VhcmNoRm9ybS49JFNlYXJjaEZvcm1zcmNbJ2Rlc2NyaXB0aW9uJ10hPScnID8gIiAtIDxzbWFsbD4iLiRTZWFyY2hGb3Jtc3JjWydkZXNjcmlwdGlvbiddLiI8L3NtYWxsPiIgOiAiIiA7IA0KICAgICAgICAgJFNlYXJjaEZvcm0gLj0gIjwvdGQ+PC90cj4iOw0KICAgICAgfSANCiAgICAgICRTZWFyY2hGb3JtIC49ICI8L3RhYmxlPiI7DQogICB9IGVsc2UgeyANCiAgICAgICRTZWFyY2hGb3JtLj0iPHA+U29ycnksIGNvdWxkbid0IGZpbmQgYW55dGhpbmchPC9wPiI7IA0KICAgfSANCn0gDQoNCnJldHVybiAkU2VhcmNoRm9ybTs=';
$this->snippetCache['GetStats']='Ly8gU25pcHBldCBuYW1lOiBHZXRTdGF0cw0KLy8gU25pcHBldCBkZXNjcmlwdGlvbjogRmV0Y2hlcyB0aGUgdmlzaXRvciBzdGF0aXN0aWNzIHRvdGFscyBmcm9tIHRoZSBkYXRhYmFzZQ0KLy8gUmV2aXNpb246IDEuMSBzaGlwcyB3aXRoIEV0b21pdGUgMC42LjEtRmluYWwNCg0KJHRtcEFycmF5ID0gJGV0b21pdGUtPmdldFNpdGVTdGF0cygpOw0KDQokb3V0cHV0ID0gIg0KPHRhYmxlPg0KICA8dGhlYWQ+DQogICAgPHRyIHN0eWxlPVwidGV4dC1hbGlnbjpyaWdodDtcIj4NCiAgICAgICAgPHRkIHdpZHRoPVwiMjUlXCI+Jm5ic3A7PC90ZD4NCiAgICAgICAgPHRkIHdpZHRoPVwiMjUlXCI+PGI+UGFnZXM8L2I+PC90ZD4NCiAgICAgICAgPHRkIHdpZHRoPVwiMjUlXCI+PGI+VmlzaXRzPC9iPjwvdGQ+DQogICAgICAgIDx0ZCB3aWR0aD1cIjI1JVwiPjxiPlZpc2l0b3JzPC9iPjwvdGQ+DQogICAgPC90cj4NCiAgPC90aGVhZD4NCiAgICA8dHIgc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0O1wiPg0KICAgICAgICA8dGQ+PGI+VG9kYXk8L2I+PC90ZD4NCiAgICAgICAgPHRkPiIubnVtYmVyX2Zvcm1hdCgkdG1wQXJyYXlbJ3BpRGF5J10pLiI8L3RkPg0KICAgICAgICA8dGQ+Ii5udW1iZXJfZm9ybWF0KCR0bXBBcnJheVsndmlEYXknXSkuIjwvdGQ+DQogICAgICAgIDx0ZD4iLm51bWJlcl9mb3JtYXQoJHRtcEFycmF5Wyd2aXNEYXknXSkuIjwvdGQ+DQogICAgPC90cj4NCiAgICA8dHIgc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0O1wiPg0KICAgICAgICA8dGQ+PGI+VGhpcyBNb250aDwvYj48L3RkPg0KICAgICAgICA8dGQ+Ii5udW1iZXJfZm9ybWF0KCR0bXBBcnJheVsncGlNb250aCddKS4iPC90ZD4NCiAgICAgICAgPHRkPiIubnVtYmVyX2Zvcm1hdCgkdG1wQXJyYXlbJ3ZpTW9udGgnXSkuIjwvdGQ+DQogICAgICAgIDx0ZD4iLm51bWJlcl9mb3JtYXQoJHRtcEFycmF5Wyd2aXNNb250aCddKS4iPC90ZD4NCiAgICA8L3RyPg0KICAgIDx0ciBzdHlsZT1cInRleHQtYWxpZ246cmlnaHQ7XCI+DQogICAgICAgIDx0ZD48Yj5BbGwgVGltZTwvYj48L3RkPg0KICAgICAgICA8dGQ+Ii5udW1iZXJfZm9ybWF0KCR0bXBBcnJheVsncGlBbGwnXSkuIjwvdGQ+DQogICAgICAgIDx0ZD4iLm51bWJlcl9mb3JtYXQoJHRtcEFycmF5Wyd2aUFsbCddKS4iPC90ZD4NCiAgICAgICAgPHRkPiIubnVtYmVyX2Zvcm1hdCgkdG1wQXJyYXlbJ3Zpc0FsbCddKS4iPC90ZD4NCiAgICA8L3RyPg0KPC90YWJsZT4NCiI7DQoNCnJldHVybiAkb3V0cHV0Ow==';
$this->snippetCache['DateTime']='Ly8gU25pcHBldDogRGF0ZVRpbWUNCi8vIFB1cnBvc2U6IEFkanVzdHMgYW5kIGZvcm1hdHMgZG9jdW1lbnQgb3IgY3VycmVudCBEYXRlL1RpbWUNCi8vIFJldmlzaW9uOiAxLjIgc2hpcHMgd2l0aCBFdG9taXRlIFByZWx1ZGUgdjEuMA0KLy8gQ3JlZGl0OiAyMDA0LTA5LTEyIC0tIEFsZXggQnV0dGVyDQovLyBDcmVkaXQ6ID8/Pz8tPz8tPz8gLS0gQmlsbCBXaWxzb24NCi8vIENyZWRpdDogMjAwNS0wMi0wNyAtLSBMbG95ZCBCb3JyZXR0DQovLyBDcmVkaXQ6IDIwMDgtMDQtMTQgLS0gUmFscGggQS4gRGFobGdyZW4NCg0KLyoNCiAgIEZvciBzdWNoIGEgc21hbGwgcGllY2Ugb2YgY29kZSwgdGhpcyBpcyBhbiBleGNlZWRpbmdseSANCiAgIHBvd2VyZnVsIGFuZCBoYW5keSBzbmlwcGV0LiBUaGUgc25pcHBldCBhY2NlcHRzIHRoZQ0KICAgcGFyYW1ldGVyLCAndGltZXN0YW1wJy4gSWYgdGhpcyBpc24ndCBzZXQsIHRoZSBzbmlwcGV0IA0KICAgd2lsbCBkaXNwbGF5IHRoZSBjdXJyZW50IGRhdGUgYW5kIHRpbWUuIElmIHlvdSBwYXNzIGEgDQogICB0aW1lc3RhbXAgKFVOSVgtc3R5bGUpLCBpdCB3aWxsIGNvbnZlcnQgdGhhdCBpbnN0ZWFkLiANCiAgIFByb2JhYmx5IHRoZSBtb3N0IHVzZWZ1bCB3YXkgb2YgdXNpbmcgdGhpcyBzbmlwcGV0IGlzIA0KICAgYnkgd3JpdGluZyBzb21ldGhpbmcgbGlrZSB0aGUgZm9sbG93aW5nIGluIHlvdXIgdGVtcGxhdGUgDQogICBvciBkb2N1bWVudDoNCg0KICAgTGFzdCBlZGl0ZWQgb246IFshRGF0ZVRpbWU/dGltZXN0YW1wPVsqZWRpdGVkb24qXSFdDQoNCiAgIFRoaXMgd2lsbCBkaXNwbGF5IHRoZSBkYXRlIGFuZCB0aW1lIGF0IHdoaWNoIHRoZSBkb2N1bWVudCANCiAgIHdhcyBsYXN0IGFsdGVyZWQgb24geW91ciBwYWdlIQ0KDQogIEF2YWlsYWJsZSBkb2N1bWVudCByZWxhdGVkIHRpbWVzdGFtcHM6DQogIFsqY3JlYXRlZG9uKl0gID0gdGltZXN0YW1wIHdoZW4gZG9jdW1lbnQgd2FzIG9yaWdpbmFsbHkgY3JlYXRlZA0KICBbKmVkaXRlZG9uKl0gICA9IHRpbWVzdGFtcCB3aGVuIGRvY3VtZW50IHdhcyBsYXN0IGVkaXRlZA0KICBbKnB1Yl9kYXRlKl0gICA9IHRpbWVzdGFtcCB3aGVuIGRvY3VtZW50IHNob3VsZCBiZSBwdWJsaXNoZWQNCiAgWyp1bnB1Yl9kYXRlKl0gPSB0aW1lc3RhbXAgd2hlbiBkb2N1bWVudCBzaG91bGQgYmUgdW5wdWJsaXNoZWQNCiAgU2VuZGluZyB3aXRob3V0IFsqLi4uKl0gaXMgYWxzbyBhbGxvd2VkDQoNCiAgQWRkaXRpb25hbCBleGFtcGxlczoNCiAgWyFEYXRlVGltZT9mb3JtYXQ9JVktJW0tJWQgJXIhXSByZXR1cm5zIGZvcm1hdHRlZCBsaWtlIDIwMDgtMTItMzEgMTI6NTk6MDAgcG0NCiAgWyFEYXRlVGltZSFdIHJldHVybnMgdGhlIGN1cnJlbnQgdGltZSBiYXNlZCBvbiB0aGUgZGF0ZSBhbmQgdGltZSBmb3JtYXRzIHNldA0KICBpbiB0aGUgY29uZmlndXJhdGlvbiBwYW5lbC4NCiAgWyFEYXRlVGltZT90aW1lc3RhbXA9WyplZGl0ZWRvbipdJmZvcm1hdD0lWS0lbS0lZCAlciFdIGlzIGEgZnVsbCBmZWF0dXJlZCBleGFtcGxlDQogIFshRGF0ZVRpbWU/dGltZXN0YW1wPWVkaXRlZG9uIV0gdGVsbHMgdGhlIHNuaXBwZXQgdG8gdXNlIHRoZSBkb2N1bWVudCBvYmplY3QNCiAgDQogIGZvciBtb3JlIHN0cmZ0aW1lKCkgZGF0ZSBmb3JtYXR0aW5nIG9wdGlvbnMgc2VlOg0KICAgIGh0dHA6Ly91cy5waHAubmV0L21hbnVhbC9lbi9mdW5jdGlvbi5zdHJmdGltZS5waHANCiovDQoNCi8vIG9wdGlvbmFsbHksIHRpbWVzdGFtcCBkb2N1bWVudCBvYmplY3RzIGNhbiBiZSBzZW50IHdpdGhvdXQgdGFncw0KaWYoaW5fYXJyYXkoJHRpbWVzdGFtcCwgYXJyYXkoJ2NyZWF0ZWRvbicsICdlZGl0ZWRvbicsICdwdWJfZGF0ZScsICd1bnB1Yl9kYXRlJykpKQ0Kew0KICAkdGltZXN0YW1wID0gJGV0b21pdGUtPmRvY3VtZW50T2JqZWN0WyR0aW1lc3RhbXBdOw0KfQ0KDQovLyBpZiBhbiBpbnZhbGlkIHRpbWVzdGFtcCB3YXMgc2VudCwgcmV1cm4gYW4gZXJyb3INCmlmKGlzc2V0KCR0aW1lc3RhbXApICYmIGVtcHR5KCR0aW1lc3RhbXApKQ0Kew0KICByZXR1cm4gIih0aW1lc3RhbXAgZXJyb3IpIjsNCn0NCi8vIGlmICRmb3JtYXQgd2FzIHNlbnQsIHVzZSBpdCwgb3RoZXJ3aXNlIHVzZSB0aGUgY29uZmlndXJhdGlvbiBwYW5lbCBmb3JtYXQNCiRmb3JtYXQgPSBpc3NldCgkZm9ybWF0KSA/ICRmb3JtYXQgOiAkZXRvbWl0ZS0+Y29uZmlnWydkYXRlX2Zvcm1hdCddLiIgIi4kZXRvbWl0ZS0+Y29uZmlnWyd0aW1lX2Zvcm1hdCddOw0KLy8gZ2V0IHRoZSBFdG9taXRlIHNlcnZlciBvZmZzZXQgdGltZSBpbiBzZWNvbmRzDQokc2VydmVyX29mZnNldF90aW1lID0gJGV0b21pdGUtPmNvbmZpZ1snc2VydmVyX29mZnNldF90aW1lJ107DQovLyBpZiBzZXJ2ZXIgb2Zmc2V0IHRpbWUgaXMgbnVsbCwgc2V0IHRvIHplcm8NCmlmKCEkc2VydmVyX29mZnNldF90aW1lKQ0Kew0KICAkc2VydmVyX29mZnNldF90aW1lID0gMDsNCn0NCi8vIGlmIG5vIHRpbWVzdGFtcCB3YXMgc3VwcGxpZWQsIHVzZSBjdXJyZW50IHRpbWUNCmlmKCFpc3NldCgkdGltZXN0YW1wKSkNCnsNCiAgJHRpbWVzdGFtcD10aW1lKCk7DQp9DQovLyByZXR1cm4gZm9ybWF0dGVkIHRpbWVzdGFtcCB0byBjYWxsZXINCnJldHVybiBzdHJmdGltZSgkZm9ybWF0LCAkdGltZXN0YW1wICsgJHNlcnZlcl9vZmZzZXRfdGltZSk7DQovLyB0aGUgZW5kDQo=';
$this->snippetCache['GetKeywords']='Ly8gU25pcHBldDogR2V0S2V5d29yZHMNCi8vIFB1cnBvc2U6IEZldGNoZXMgdGhlIGtleXdvcmRzIGF0dGFjaGVkIHRvIHRoZSBkb2N1bWVudC4NCi8vIFJldmlzaW9uOiAxLjENCg0KJHJlc3VsdHMgPSAkZXRvbWl0ZS0+Z2V0S2V5d29yZHMoKTsNCg0KaWYoY291bnQoJHJlc3VsdHMpID4gMCkNCnsNCiAgJGtleXdvcmRzID0gam9pbigkcmVzdWx0cywgIiwiKTsNCiAgcmV0dXJuICI8bWV0YSBodHRwLWVxdWl2PVwia2V5d29yZHNcIiBjb250ZW50PVwieyRrZXl3b3Jkc31cIiAvPiI7DQp9DQo=';
$this->snippetCache['NewsListing']='';
$this->snippetCache['GetAuthorData']='Ly8gIFNuaXBwZXQ6IEdldEF1dGhvckRhdGENCi8vICBQdXJwb3NlOiBSZXR1cm5zIGF1dGhvciBpbmZvcm1hdGlvbiBiYXNlZCBvbiBzZW50IHBhcmFtZXRlcnMgDQovLyBSZXZpc2lvbjogMS4yIHNoaXBzIHdpdGggRXRvbWl0ZSBQcmVsdWRlIHYxLjANCi8vICAgQXV0aG9yOiBSYWxwaCBBLiBEYWhsZ3JlbiAtIHJhZDE0NzAxQHlhaG9vLmNvbQ0KLy8gTW9kaWZpZWQ6IDIwMDgtMDQtMTcNCg0KLy8gVXNhZ2U6IFtbR2V0QXV0aG9yRGF0YT9pbnRlcm5hbEtleT1bKmNyZWF0ZWRieSpdJmZpZWxkPWZ1bGxuYW1lXV0NCi8vIGludGVybmFsS2V5PVsqZWRpdGVkYnkqXSB3aWxsIHJldHVybiBkYXRhIGFib3V0IHRoZSB1c2VyIHdobyBsYXN0IGVkaXRlZCBhIGRvY3VtZW50DQovLyBpbnRlcm5hbEtleSBzdWJzZXQ6IChbKmNyZWF0ZWRieSpdLCBbKmVkaXRlZGJ5Kl0sIG9yIGEgbnVtZXJpYyBpbnRlcm5hbEtleSkNCi8vIGZpZWxkIGNhbiBiZSBhbnkgY29sdW1uIGluIHRoZSB1c2VyX2F0dHJpYnV0ZXMgZGF0YWJhc2UgdGFibGUNCi8vIGZpZWxkIHN1YnNldDogKGZ1bGxuYW1lLGVtYWlsLHBob25lLG1vYmlsZXBob25lKQ0KDQovLyBpZiBib3RoIHBhcmFtZXRlcnMgd2VyZSBwYXNzZWQsIHByb2Nlc3MgdGhlIHJlcXVlc3QNCmlmKCgkaW50ZXJuYWxLZXkgIT0gIiIpICYmICgkZmllbGQgIT0gIiIpKQ0Kew0KICAvLyBwcm9jZXNzIHRoZSByZXF1ZXN0IChyZXR1cm5zIGZhbHNlIG9uIGZhaWx1cmUpDQogIGlmKCRhdXRob3IgPSAkZXRvbWl0ZS0+Z2V0QXV0aG9yRGF0YSgkaW50ZXJuYWxLZXkpKQ0KICB7DQogICAgLy8gaWYgdGhlIHJlcXVlc3Qgd2FzIHN1Y2Nlc3NmdWwsIHJldHVybiB0aGUgcmVxdWVzdGVkIGRhdGENCiAgICByZXR1cm4gJGF1dGhvclskZmllbGRdOw0KICB9DQp9DQoNCi8vIGlmIGFsbCBlbHNlIGZhaWxzLCByZXR1cm4gZW1wdHkNCnJldHVybjs=';
$this->snippetCache['SiteUpdate']='Ly8gU25pcHBldCBuYW1lOiBTaXRlVXBkYXRlDQovLyBTbmlwcGV0IGRlc2NyaXB0aW9uOiBSZXR1cm5zIGRhdGUgb2YgbW9zdCByZWNlbnQgcHVibGlzaGVkIGRvY3VtZW50IHVwZGF0ZQ0KLy8gUmV2aXNpb246IDEuMiBzaGlwcyB3aXRoIEV0b21pdGUgUHJlbHVkZSB2MS4wDQoNCi8vIEF1dGhvcjogUmFscGggQS4gRGFobGdyZW4gLS0gMjAwNS0wNy0xMw0KLy8gVXNhZ2U6IFshU2l0ZVVwZGF0ZT9kYXRlRm9ybWF0PSVCICVlLCAlWSFdIFJldHVybnMgZGF0ZSBmb3JtYXR0ZWQ6IEp1bHkgMTMsIDIwMDUgDQovLyBTZWUgc3RyZnRpbWUoKSBkb2N1bWVudGF0aW9uIGZvciBhZGRpdGlvbmFsIGZvcm1hdHRpbmcgb3B0aW9ucw0KDQovLyBDaGFuZ2VzOg0KLy8gICB2MS4xIGJ5IExsb3lkIEJvcnJldHQgLS0gMjAwNi0wNC0wNw0KLy8gICAgIFJldHVybiBsb2NhbCB0aW1lIGJhc2VkIG9uIEV0b21pdGUgc2VydmVyIG9mZnNldCB0aW1lDQovLyAgIHYxLjIgYnkgUmFscGggQS4gRGFobGdyZW4gLS0gMjAwOC0wNC0xMg0KLy8gICAgIElnbm9yZSB1bnB1Ymxpc2hlZCBhbmQgZGVsZXRlZCBkb2N1bWVudHMNCi8vICAgICBVc2UgRGF0ZSBhbmQgVGltZSBmb3JtYXRzIGZyb20gY29uZmlndXJhdGlvbg0KDQovLyB3YXMgJGRhdGVGb3JtYXQgc2VudCBpbiBzbmlwcGV0IGNhbGw/DQppZihpc3NldCgkZGF0ZUZvcm1hdCkpDQp7DQogIC8vIHVzZSAkZGF0ZUZvcm1hdCBzZW50IGluIHNuaXBwZXQgY2FsbA0KICAkZm9ybWF0ID0gJGRhdGVGb3JtYXQ7DQp9DQplbHNlDQp7DQogIC8vIHVzZSBkZWZhdWx0IERhdGUgJiBUaW1lIGZvcm1hdHMgZnJvbSBjb25maWd1cmF0aW9uDQogICRmb3JtYXQgPSAkZXRvbWl0ZS0+Y29uZmlnWydkYXRlX2Zvcm1hdCddLiIgIi4kZXRvbWl0ZS0+Y29uZmlnWyd0aW1lX2Zvcm1hdCddOw0KfQ0KDQovLyBnZXQgdGhlIEV0b21pdGUgc2VydmVyIG9mZnNldCB0aW1lIGluIHNlY29uZHMNCiRzZXJ2ZXJfb2Zmc2V0X3RpbWUgPSAkZXRvbWl0ZS0+Y29uZmlnWydzZXJ2ZXJfb2Zmc2V0X3RpbWUnXTsNCi8vIGlmIG5vIHNlcnZlciBvZmZzZXQgdGltZSB3YXMgZm91bmQsIHVzZSB6ZXJvDQppZighJHNlcnZlcl9vZmZzZXRfdGltZSkNCnsNCiAgJHNlcnZlcl9vZmZzZXRfdGltZSA9IDA7DQp9DQoNCi8vIGRlZmluZSBvdXIgZGF0YWJhc2UgcXVlcnkNCiRzcWwgPSA8PDxRVUVSWQ0KICBTRUxFQ1QgZWRpdGVkb24gDQogIEZST00geyRldG9taXRlLT5kYn1zaXRlX2NvbnRlbnQgDQogIFdIRVJFIHB1Ymxpc2hlZD0xDQogIEFORCBkZWxldGVkPTANCiAgT1JERVIgQlkgZWRpdGVkb24gREVTQw0KUVVFUlk7DQoNCi8vIHBlcmZvcm0gdGhlIGRhdGFiYXNlIHF1ZXJ5DQokcnMgPSAkZXRvbWl0ZS0+ZGJRdWVyeSgkc3FsKTsNCg0KLy8gY2hlY2sgdG8gc2VlIGlmIHJlc3VsdHMgd2VyZSByZXR1cm5lZA0KaWYoJGV0b21pdGUtPnJlY29yZENvdW50KCRycykgPiAwKQ0Kew0KICAvLyBmZXRjaCB0aGUgZmlyc3QgZGF0YSByb3cgKGxhc3QgZWRpdGVkKQ0KICAkcm93ID0gJGV0b21pdGUtPmZldGNoUm93KCRycyk7DQogIC8vIGFkZCBzZXJ2ZXIgb2Zmc2V0IHRvIHRpbWVzdGFtcA0KICAkdXBkYXRlID0gc3RyZnRpbWUoJGZvcm1hdCwkcm93WydlZGl0ZWRvbiddICsgJHNlcnZlcl9vZmZzZXRfdGltZSk7DQp9DQplbHNlDQp7DQogIC8vIG5vIHJlc3VsdHMgcmV0dXJuZWQgc28gc2V0IHRvIG51bGwNCiAgJHVwZGF0ZSA9IG51bGw7DQp9DQoNCi8vIHJldHVybiBmb3JtYXR0ZWQgdGltZXN0YW1wIHRvIGNhbGxlcg0KcmV0dXJuICR1cGRhdGU7';
$this->snippetCache['SearchPrompt']='Ly8gU25pcHBldCBuYW1lOiBTZWFyY2hQcm9tcHQNCi8vIFNuaXBwZXQgZGVzY3JpcHRpb246IFNlYXJjaCBwcm9tcHQgc25pcHBldCBmb3IgdXNlIHdpdGggU2VhcmNoUmVzdWx0cw0KLy8gUmV2aXNpb246IDEuMDAgc2hpcHMgd2l0aCBFdG9taXRlIDAuNi4xLUZpbmFsDQovLyBVc2U6IFshU2VhcmNoUHJvbXB0P3Jlc3VsdHNpZD0jIyMhXSBzbmlwcGV0IGNhbGwgd2hlcmUgIyMjIGlzIHRoZQ0KLy8gICBkb2N1bWVudCBpZCBvZiB0aGUgcGFnZSB3aGljaCBjb250YWlucyB0aGUgWyFTZWFyY2hSZXN1bHRzIV0gc25pcHBldCBjYWxsDQoNCiRyZXN1bHRzRGVmYXVsdCA9ICIxNCI7ICAvLyBEb2N1bWVudCBpZCB0byB1c2UgaWYgJHJlc3VsdHNpZCBub3Qgc2VudA0KJHJlc3VsdHNpZCA9IGlzc2V0KCRyZXN1bHRzaWQpID8gJHJlc3VsdHNpZCA6ICRyZXN1bHRzRGVmYXVsdDsNCg0KJHByb21wdCA9ICJTZWFyY2ggdGhpcyBzaXRlIjsgIC8vIFNlYXJjaCBib3ggbGFiZWwgdGV4dA0KJHN1Ym1pdCA9ICJTZWFyY2giOyAgLy8gU3VibWl0IGJ1dHRvbiBsYWJlbA0KDQokb3V0cHV0ID0gDQo8PDxFTkQNCjxmb3JtIGlkPSJTZWFyY2hGb3JtIiBhY3Rpb249Ilt+eyRyZXN1bHRzaWR9fl0iIG1ldGhvZD0icG9zdCI+IA0KICA8ZGl2IGNsYXNzPSJzZWFyY2hib3giIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjsiPg0KICAgIDxwPnskcHJvbXB0fTwvcD4NCiAgICA8cD48aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ic2VhcmNoIiB2YWx1ZT0iIiAvPjwvcD4NCiAgICA8cD48aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWIiIGNsYXNzPSJidXR0b24iIHZhbHVlPSJ7JHN1Ym1pdH0iIC8+PC9wPg0KICA8L2Rpdj4NCjwvZm9ybT4NCkVORDsNCg0KcmV0dXJuICRvdXRwdXQ7';
$this->snippetCache['SearchResults']='Ly8gIFNlYXJjaFJlc3VsdHMNCi8vICBEaXNwbGF5cyByZXN1bHRzIG9mIFNlYXJjaFByb21wdCBzbmlwcGV0DQoNCiRub1Jlc3VsdHMgPSAiPHA+Tm8gc2VhcmNoIHJlc3VsdHMgd2VyZSBmb3VuZC48L3A+IjsNCiRyZXN1bHRzVGV4dCA9ICI8cD5UaGUgZm9sbG93aW5nIHJlc3VsdHMgd2VyZSBmb3VuZDo8L3A+IjsNCiRzZWFyY2hTdHJpbmcgPSANCmlzc2V0KCRfUE9TVFsnc2VhcmNoJ10pICYmIA0KJF9QT1NUWydzZWFyY2gnXSE9ICJ7eyIgJiYgDQokX1BPU1RbJ3NlYXJjaCddIT0gIltbIiAmJiANCiRfUE9TVFsnc2VhcmNoJ10hPSAiWygiICYmIA0KJF9QT1NUWydzZWFyY2gnXSE9ICJbfiIgJiYgDQokX1BPU1RbJ3NlYXJjaCddIT0gIlsqIiA/DQokX1BPU1RbJ3NlYXJjaCddIDogIiIgOw0KDQppZihpc3NldCgkX1BPU1RbJ3NlYXJjaCddKSAmJiAkX1BPU1RbJ3NlYXJjaCddIT0nJykgeyANCiAgICRzZWFyY2ggPSBleHBsb2RlKCIgIiwgJF9QT1NUWydzZWFyY2gnXSk7IA0KICAgJHNxbCA9ICJTRUxFQ1QgaWQsIHBhZ2V0aXRsZSwgcGFyZW50LCBkZXNjcmlwdGlvbiBGUk9NICIuJGV0b21pdGUtPmRiLnNpdGVfY29udGVudC4iIFdIRVJFIChjb250ZW50IExJS0UgJyUiLiRzZWFyY2hbMF0uIiUnIjsgDQogICBmb3IgKCR4PTE7JHggPCBjb3VudCgkc2VhcmNoKTsgJHgrKykgeyANCiAgICAgICAkc3FsIC49ICIgQU5EIGNvbnRlbnQgbGlrZSAnJSRzZWFyY2hbJHhdJSciOyANCiAgIH0gDQogICAkc3FsIC49ICIgT1IgcGFnZXRpdGxlIExJS0UgJyUiLiRzZWFyY2hbMF0uIiUnICI7IA0KICAgZm9yICgkeD0xOyR4IDwgY291bnQoJHNlYXJjaCk7ICR4KyspIHsgDQogICAgICAgJHNxbCAuPSAiIEFORCBwYWdldGl0bGUgbGlrZSAnJSRzZWFyY2hbJHhdJSciOyANCiAgIH0gDQogICAkc3FsIC49ICIgT1IgZGVzY3JpcHRpb24gTElLRSAnJSIuJHNlYXJjaFswXS4iJScgIjsgDQogICBmb3IgKCR4PTE7JHggPCBjb3VudCgkc2VhcmNoKTsgJHgrKykgeyANCiAgICAgICAkc3FsIC49ICIgQU5EIGRlc2NyaXB0aW9uIGxpa2UgJyUkc2VhcmNoWyR4XSUnIjsgDQogICB9IA0KICAgJHNxbCAuPSAiKSBBTkQgcHVibGlzaGVkID0gMSBBTkQgc2VhcmNoYWJsZT0xIEFORCBkZWxldGVkPTA7IjsgDQogICAkcnMgPSAkZXRvbWl0ZS0+ZGJRdWVyeSgkc3FsKTsgDQogICAkbGltaXQgPSAkZXRvbWl0ZS0+cmVjb3JkQ291bnQoJHJzKTsgDQogICBpZigkbGltaXQ+MCkgeyANCiAgICAgICRTZWFyY2hGb3JtIC49ICRyZXN1bHRzVGV4dC4iPHA+PHRhYmxlIGNlbGxzcGFjaW5nPScwJyBjZWxscGFkZGluZz0nMCc+IjsgDQogICAgICBmb3IgKCR5ID0gMDsgJHkgPCAkbGltaXQ7ICR5KyspIHsgDQogICAgICAgICAkU2VhcmNoRm9ybXNyYz0kZXRvbWl0ZS0+ZmV0Y2hSb3coJHJzKTsgDQogICAgICAgICAkU2VhcmNoRm9ybS49Ijx0cj48dGQgc3R5bGU9J3BhZGRpbmc6IDFweCc+PGEgaHJlZj0nW34iLiRTZWFyY2hGb3Jtc3JjWydpZCddLiJ+XSc+PGI+Ii4kU2VhcmNoRm9ybXNyY1sncGFnZXRpdGxlJ10uIjwvYj48L2E+PC90ZD48dGQgc3R5bGU9J3BhZGRpbmc6IDFweCc+IjsgDQogICAgICAgICAkU2VhcmNoRm9ybS49JFNlYXJjaEZvcm1zcmNbJ2Rlc2NyaXB0aW9uJ10hPScnID8gIiAtIDxzbWFsbD4iLiRTZWFyY2hGb3Jtc3JjWydkZXNjcmlwdGlvbiddLiI8L3NtYWxsPiIgOiAiIiA7IA0KICAgICAgICAgJFNlYXJjaEZvcm0gLj0gIjwvdGQ+PC90cj4iOw0KICAgICAgfSANCiAgICAgICRTZWFyY2hGb3JtIC49ICI8L3RhYmxlPiI7DQogICB9IGVsc2UgeyANCiAgICAgICRTZWFyY2hGb3JtIC49ICRub1Jlc3VsdHM7IA0KICAgfSANCn0gDQoNCnJldHVybiAkU2VhcmNoRm9ybTs=';
$this->snippetCache['ListDocuments']='Ly8gU25pcHBldCBuYW1lOiBMaXN0RG9jdW1lbnRzDQovLyBTbmlwcGV0IGRlc2NyaXB0aW9uOiBEaXNwbGF5cyBkb2N1bWVudCBsaXN0aW5ncyBiYXNlZCBvbiBwcm92aWRlZCBjcml0ZXJpYSANCi8vIFJldmlzaW9uOiAxLjIgc2hpcHMgd2l0aCBFdG9taXRlIDAuNi4xLUZpbmFsDQoNCi8vIEFkdmFuY2VkIHZlcnNpb24gb2YgdGhlIE5ld3NMaXN0aW5nIHNuaXBwZXQgY3JlYXRlZCBieSBSYWxwaCBBLiBEYWhsZ3Jlbg0KLy8gICBmcm9tIHRoZSBlYXJsaWVyIHZlcnNpb24gYnkgQWxleCBCdXR0ZXINCg0KLy8gRGlzcGxheXMgYnJpZWYgbGlzdGluZyBvZiBuZXcgYXJ0aWNsZSBzdW1tYXJpZXMgd2l0aCBsaW5rcyB0byBmdWxsIGFydGljbGVzDQovLyBBbGwgcGFzc2VkIHZhcmlhYmxlIGFzc2lnbm1lbnRzIGFyZSBvcHRpb25hbCBhbmQgY2FuIGJlIGN1c3RvbWl6ZWQgYXMgbmVlZGVkDQovLyBVc2FnZTogWyFMaXN0RG9jdW1lbnRzP2lkcz0xMjMmbnVtTGlzdGluZ3M9NSZtYXhMaXN0aW5ncz0yMCZtYXhDaGFycz0yMDAhXQ0KLy8vICAgT3I6IFshTGlzdERvY3VtZW50cyFdIHRvIHVzZSBkZWZhdWx0IHNldHRpbmdzIGZvciBjdXJlbnQgZm9sZGVyIGRvY3VtZW50DQovLyAgICBPcjogWyFMaXN0RG9jdW1lbnRzP2lkcz0xMSwyNywzNCwxMTkmbnVtTGlzdGluZ3M9NSZtYXhMaXN0aW5ncz01Jm1heENoYXJzPTQwMCFdDQovLyAgICBPcjogWyFMaXN0RG9jdW1lbnRzP2NyZWF0ZWRieT0xJmNyZWF0ZWRvbj0yMDA1MDUxNCFdDQovLyBOb3RlOiAgY3JlYXRlZG9uID0gWVlZWU1NREQgb3IgTU0vREQvWVlbWVldIGZvcm1hdHMNCi8vICAgICAgICBjcmVhdGVkYnkgPSB1c2VyL21hbmFnZXIgaW50ZXJuYWxLZXkgbnVtYmVyDQoNCi8vIENoYW5nZXM6DQovLyAgIHYxLjEgYnkgUmFscGggQS4gRGFobGdyZW4gLS0gMjAwNS0wNy0xMw0KDQovLyAgIHYxLjIgYnkgTGxveWQgQm9ycmV0dCAtLSAyMDA2LTA0LTA3DQovLyAgICAgUmV0dXJuIGxvY2FsIHRpbWUgYmFzZWQgb24gRXRvbWl0ZSBzZXJ2ZXIgb2Zmc2V0IHRpbWUNCg0KLy8tLS0tLS0tLS0tICBTdGFydCBvZiBpbmxpbmUgc3R5bGUgdmFyaWFibGVzICAtLS0tLS0tLS0tLy8NCi8vICBjYW4gYmUgY2hhbmdlZCB0byB1c2UgQ1NTIGJ5IHVzaW5nOiAkb2JqZWN0X2NzcyA9ICJjbGFzcz0nb2JqZWN0X2NsYXNzX25hbWUnIjsNCg0KJGVudHJ5X2JveF9jc3MgPSAic3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiNGMEY4RkY7IHBhZGRpbmc6NXB4OyBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1wiIjsNCiR0aXRsZV9jc3MgPSAic3R5bGU9XCJjb2xvcjpyZWQ7IGZvbnQtd2VpZ2h0OmJvbGQ7IGRpc3BsYXk6YmxvY2s7XCIiOw0KJGF1dGhvcl9jc3MgPSAic3R5bGU9XCJjb2xvcjpncmVlbjsgZm9udC13ZWlnaHQ6Ym9sZDsgZGlzcGxheTppbmxpbmU7XCIiOw0KJGRhdGVfY3NzID0gInN0eWxlPVwiY29sb3I6Z3JlZW47IGRpc3BsYXk6aW5saW5lO1wiIjsNCiRwYXJlbnRfY3NzID0gInN0eWxlPVwiY29sb3I6I0ZGQTUwMDsgZm9udC13ZWlnaHQ6Ym9sZFwiIjsNCiR0ZXh0X2NzcyA9ICJzdHlsZT1cImNvbG9yOmJsYWNrOyBmb250LXdlaWdodDpub3JtYWw7IG1hcmdpbi10b3A6LjVlbTtcIiI7DQokbW9yZV9jc3MgPSAic3R5bGU9XCJmbG9hdDpyaWdodDsgY29sb3I6I0ZGQTUwMDsgZm9udC13ZWlnaHQ6Ym9sZDtcIiI7DQogDQovLy0tLS0tLS0tLS0gIFN0YXJ0IG9mIGNvbmZpZ3VyYXRpb24gdmFyaWFibGUgYXNzaWdubWVudHMgIC0tLS0tLS0tLS0vLw0KDQovLyBhcnJheSBvZiBmb2xkZXIgaWQncyB0aGF0IGNvbnRhaW4gbmV3cyBsaXN0aW5ncywgb3IgY3VycmVudCBmb2xkZXIgZG9jdW1lbnQgKGRlZmF1bHQpDQokaWRzID0gaXNzZXQoJGlkcykgPyAkaWRzIDogJGV0b21pdGUtPmRvY3VtZW50SWRlbnRpZmllcjsNCg0KLy8gbnVtYmVyIG9mIG5ld3MgbGlzdGluZ3MgdG8gc3VtbWFyaXplDQokbnVtTGlzdGluZ3MgPSBpc3NldCgkbnVtTGlzdGluZ3MpID8gJG51bUxpc3RpbmdzIDogMzsNCg0KLy8gbWF4aW11bSBudW1iZXIgb2YgbmV3cyBsaXN0aW5ncyB0byBkaXNwbGF5DQokbWF4TGlzdGluZ3MgPSBpc3NldCgkbWF4TGlzdGluZ3MpID8gJG1heExpc3RpbmdzIDogMTAwOw0KIA0KLy8gIG1heGltdW0gY2hhcmFjdGVyIGNvdW50IG9mIG5ld3MgbGlzdGluZyBzdW1tYXJpZXMgdG8gZGlzcGxheQ0KJG1heENoYXJzID0gaXNzZXQoJG1heENoYXJzKSA/ICRtYXhDaGFycyA6IDE1MDsNCg0KLy8gYXNzaWduIG1lc3NhZ2UgdG8gcmV0dXJuIGlmIG5vIG5ld3MgbGlzdGluZ3MgYXJlIGZvdW5kDQokbm9SZXN1bHRzID0gIk5vIGVudHJpZXMgd2VyZSBmb3VuZC48YnIgLz4iOw0KIA0KLy8gRGF0ZSAmIFRpbWUgZm9ybWF0IGJhc2VkIG9uIFBIUCBmdW5jdGlvbiBzdHJmdGltZSgpIHsiJWQtJW0tJXkgJUg6JU06JVMifQ0KJGRhdGVfdGltZV9mb3JtYXQgPSAiJVktJW0tJWQiOw0KIA0KLy8gdGV4dCBmb3IgYXV0aG9yIGxhYmVsDQokYXV0aG9yID0gIkF1dGhvcjogIjsNCg0KLy8gVGV4dCB0byBkaXNwbGF5IGFzIGxpbmsgdG8gZnVsbCBuZXdzIGxpc3RpbmcNCiRtb3JlID0gIlJlYWQgdGhlIGNvbXBsZXRlIGFydGljbGUgJnJhcXVvOyI7DQoNCi8vIFRleHQgdG8gZGlzcGxheSBhYm92ZSBhZGRpdGlvbmFsIGFydGljbGVzIGxpc3QNCiRvbGRlck5ld3MgPSAiQWRkaXRpb25hbCBSZWNlbnQgQXJ0aWNsZXM6IjsNCg0KLy8gVGV4dCB0byBkaXNwbGF5IGJldHdlZW4gQXV0aG9yIGFuZCBEYXRlIGZpZWxkcw0KJGJldHdlZW4gPSAiJiM4MjEyOyI7DQogDQovLy0tLS0tLS0tLS0gIEVuZCBvZiBjb25maWd1cmF0aW9uIHZhcmlhYmxlIGFzc2lnbm1lbnRzICAtLS0tLS0tLS0tLy8NCg0KLy8gZ2V0IHRoZSBFdG9taXRlIHNlcnZlciBvZmZzZXQgdGltZSBpbiBzZWNvbmRzDQokc2VydmVyX29mZnNldF90aW1lID0gJGV0b21pdGUtPmNvbmZpZ1snc2VydmVyX29mZnNldF90aW1lJ107DQppZiAoISRzZXJ2ZXJfb2Zmc2V0X3RpbWUpIHsNCiAgJHNlcnZlcl9vZmZzZXRfdGltZSA9IDA7DQp9DQoNCi8vIGluaXRpYWxpemUgdGhlIGRhdGEgdmFyaWFibGUgdG8gYmUgcmV0dXJuZWQNCiRvdXRwdXQgPSAnJzsNCg0KLy8gYXNzaWduIHdoaWNoIGRhdGEgZmllbGRzIHRvIGV4dHJhY3QgZnJvbSB0YWJsZSByb3dzDQoNCiRmaWVsZHMgPSAnDQogIGlkLA0KICBwYWdldGl0bGUsDQogIGRlc2NyaXB0aW9uLA0KICBjb250ZW50LA0KICBjcmVhdGVkb24sDQogIGNyZWF0ZWRieQ0KJzsNCg0KLy8gYXNzaWduIHNlbGVjdGlvbiBjcml0ZXJpYSBmb3IgV0hFUkUgY2xhdXNlDQokd2hlcmUgPSAicGFyZW50IElOKCRpZHMpIEFORCBwdWJsaXNoZWQ9MSBBTkQgZGVsZXRlZD0wIjsNCg0KLy8gaWYgJGNyZWF0ZWRvbiB3YXMgc2VudCwgY29udmVydCBpdCB0byBhIHRpbWVzdGFtcCBhbmQgdXNlIGl0DQppZihpc3NldCgkY3JlYXRlZG9uKSkgJHdoZXJlIC49ICIgQU5EIGNyZWF0ZWRvbj0iLnN0cnRvdGltZSgkY3JlYXRlZG9uKTsNCg0KLy8gaWYgJGNyZWF0ZWRieSAodXNlciBpbnRlcm5hbEtleSkgd2FzIHNlbnQsIGFkZCB0byB3aGVyZSBjbGF1c2UNCmlmKGlzc2V0KCRjcmVhdGVkYnkpKSAkd2hlcmUgLj0gIiBBTkQgY3JlYXRlZGJ5PSIuJGNyZWF0ZWRieTsNCg0KLy8gcmV0cmlldmUgY2hpbGQgZG9jdW1lbnRzIHRoYXQgYXJlIHB1Ymxpc2hlZCBhbmQgbm90IGRlbGV0ZWQgdXNpbmcgZ2V0SW50VGFibGVSb3dzKCkgQVBJIGZ1bmN0aW9uDQokcnMgPSAkZXRvbWl0ZS0+Z2V0SW50VGFibGVSb3dzKA0KICAkZmllbGRzLA0KICAkZnJvbT0ic2l0ZV9jb250ZW50IiwNCiAgJHdoZXJlLA0KICAkc29ydD0iY3JlYXRlZG9uIiwNCiAgJGRpcj0iREVTQyIsDQogICRsaW1pdA0KKTsNCg0KLy8gcmV0dXJuIGEgbWVzc2FnZSBpZiBubyBsaXN0aW5ncyB3ZXJlIGZvdW5kDQokbGltaXQgPSBjb3VudCgkcnMpOw0KaWYoJGxpbWl0IDwgMSkgew0KICAkb3V0cHV0IC49ICRub1Jlc3VsdHM7DQp9IGVsc2Ugew0KICANCiAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IGxpc3RpbmdzIHRvIHByb2Nlc3MNCiAgJG51bUxpc3RpbmdzID0gKCRudW1MaXN0aW5ncyA8ICRsaW1pdCkgPyAkbnVtTGlzdGluZ3MgOiAkbGltaXQ7DQogIA0KICAvLyBwcm9jZXNzIHRoZSBwcm9wZXIgbnVtYmVyIG9mIGxpc3RpbmdzDQogIGZvciAoJHggPSAwOyAkeCA8ICRudW1MaXN0aW5nczsgJHgrKykgew0KICAgIA0KICAgIC8vIHJldHJpZXZlIHRoZSBhdXRob3JzIGZ1bGwgdXNlcm5hbWUgdXNpbmcgZ2V0QXV0aG9yRGF0YSgpIEFQSSBmdW5jdGlvbg0KICAgICR1c2VyZGF0YSA9ICRldG9taXRlLT5nZXRBdXRob3JEYXRhKCRyc1skeF1bJ2NyZWF0ZWRieSddKTsNCiAgICAkdXNlcm5hbWUgPSAkdXNlcmRhdGFbJ2Z1bGxuYW1lJ107DQogICAgDQogICAgLy8gaWYgdGhlIGxpc3RpbmcgaXMgbG9uZ2VyIHRoYW4gJG1heENoYXJzLCBzdHJpcCB0aGUgSFRNTCB0YWdzIGZyb20gdGhlIGNvbnRlbnQgDQogICAgJHN0cmlwcGVkID0gc3RyaXBfdGFncygkcnNbJHhdWydjb250ZW50J10pOw0KICAgIGlmKHN0cmxlbigkc3RyaXBwZWQpPiRtYXhDaGFycykgew0KICAgICAgJHJlc3QgPSBzdWJzdHIoJHN0cmlwcGVkLCAwLCAkbWF4Q2hhcnMpOw0KICAgICAgJHJlc3QgLj0gIi4uLjxiciAvPiI7IA0KICAgIH0gZWxzZSB7DQogICAgICAkcmVzdCA9ICRyc1skeF1bJ2NvbnRlbnQnXTsNCiAgICB9DQogICAgDQogICAgLy8gZm9ybWF0IHRoZSBuZXdzIGxpc3RpbmcgZm9yIGRpc3BsYXkNCiAgICAkb3V0cHV0IC49ICINCiAgICA8ZGl2ICIuJGVudHJ5X2JveF9jc3MuIj4NCiAgICAgIA0KICAgICAgPGRpdiAiLiR0aXRsZV9jc3MuIj4NCiAgICAgICAgIi4kcnNbJHhdWydwYWdldGl0bGUnXS4iDQogICAgICA8L2Rpdj4NCiAgICAgIA0KICAgICAgPGRpdiAiLiR0ZXh0X2Nzcy4iPg0KICAgICAgICANCiAgICAgICAgIi4kcmVzdC4iDQogICAgICAgIDxkaXYgc3R5bGU9XCJjbGVhcjpib3RoOyBtYXJnaW4tYm90dG9tOi41ZW07XCI+PC9kaXY+DQogICAgICAgIA0KICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjpsZWZ0OyBmbG9hdDpsZWZ0O1wiPg0KICAgICAgICAgICIuJGF1dGhvci4iDQogICAgICAgICAgPGRpdiAiLiRhdXRob3JfY3NzLiI+DQogICAgICAgICAgICAiLiR1c2VybmFtZS4iDQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgIi4kYmV0d2Vlbi4iICIuc3RyZnRpbWUoJGRhdGVfdGltZV9mb3JtYXQsICRyc1skeF1bJ2NyZWF0ZWRvbiddICsgJHNlcnZlcl9vZmZzZXRfdGltZSkuIg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBzdHlsZT0ndGV4dC1hbGlnbjpyaWdodDsgZmxvYXQ6cmlnaHQ7Jz4NCiAgICAgICAgICA8YSBocmVmPVwiW34iLiRyc1skeF1bJ2lkJ10uIn5dXCI+Ii4kbW9yZS4iPC9hPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIA0KICAgICAgPC9kaXY+DQogICAgICANCiAgICAgIDxiciAvPg0KICAgIA0KICAgIDwvZGl2Pg0KICAgIDxiciAvPiI7DQogIH0NCn0NCg0KLy8gZGlzcGxheSBsaXN0IG9mIGxpbmtzIHRvIG9sZGVyIG5ld3MgYXJ0aWNsZXMNCmlmKCgkbGltaXQgPiAkbnVtTGlzdGluZ3MpICYmICgkbnVtTGlzdGluZ3MgPCAkbWF4TGlzdGluZ3MpKSB7DQogICRvdXRwdXQgLj0gIjxiciAvPjxiciAvPjxiPiIuJG9sZGVyTmV3cy4iPC9iPjxiciAvPiI7DQogIGZvciAoJHggPSAkbnVtTGlzdGluZ3M7ICR4IDwgJGxpbWl0OyAkeCsrKSB7DQogICAgJG91dHB1dCAuPSAiPGEgaHJlZj1cIlt+Ii4kcnNbJHhdWydpZCddLiJ+XVwiPiIuJHJzWyR4XVsncGFnZXRpdGxlJ10uIjwvYT48YnIgLz4iOyAgICAgICAgICANCiAgfQ0KfQ0KDQovLyByZXR1cm4gc25pcHBldCByZXN1bHRzIGZvciBkaXNwbGF5DQpyZXR1cm4gJG91dHB1dDs=';
$this->snippetCache['ListMenu']='';
$this->snippetCache['GetDocContent']='IyBTbmlwcGV0OiAgR2V0RG9jQ29udGVudCAtLSBFdG9taXRlIFByZWx1ZGUgdjEuMA0KIyBBdXRob3I6ICAgUmFscGggQS4gRGFobGdyZW4NCiMgQ3JlYXRlZDogIDIwMDUtMDQtMTcNCiMgTW9kaWZpZWQ6IDIwMDgtMDQtMTcNCiMgUHVycG9zZTogIFJldHVybnMgYWRkaXRpb25hbCBkb2N1bWVudCBjb250ZW50IGZvciBpbmNsdXNpb24gaW4gYSBwYWdlDQojIFVzYWdlOiBbW0dldERvY0NvbnRlbnQ/aWQ9bm5dXSB3aGVyZSBubiA9IGlkIG9mIHRoZSBkb2N1bWVudCBiZWluZyByZXF1ZXN0ZWQNCg0KLy8gaWYgYSBkb2N1bWVudCBpZCB3YXMgc2VudCwgZmV0Y2ggdGhlIGRvY3VtZW50IGNvbnRlbnQNCmlmKGlzc2V0KCRpZCkpDQp7DQogIC8vIHdlIG9ubHkgd2FudCB0aGUgY29udGVudCBjb2x1bW4NCiAgJGZpZWxkcyA9ICJjb250ZW50IjsNCiAgLy8gcXVlcnkgdGhlIGRhdGFiYXNlIGZvciBvdXIgcmVjb3JkDQogICRkb2MgPSAkZXRvbWl0ZS0+Z2V0RG9jdW1lbnQoJGlkLCAkZmllbGRzKTsNCiAgLy8gaWYgb3VyIHJlY29yZCB3YXMgZm91bmQsIHJldHVybiB0aGUgY29udGVudA0KICBpZigkZG9jKQ0KICB7DQogICAgcmV0dXJuICRkb2NbJ2NvbnRlbnQnXTsNCiAgfQ0KfQ0KDQovLyBpZiBhbGwgZWxzZSBmYWlscywgcmV0dXJuIGVtcHR5DQpyZXR1cm47DQo=';
$this->snippetCache['ListSiteMap']='Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIFNuaXBwZXQ6IExpc3RTaXRlTWFwDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gVmVyc2lvbjogMS4wDQovLyBEYXRlOiAyMDA4LTA0LTExDQovLyBSYWxwaCBBLiBEYWhsZ3Jlbg0KLy8NCg0KLy8gTk9URTogVGhpcyBzbmlwcGV0IHNob3VsZCB1c2UgYSBub24tY2FjaGVhYmxlIHNuaXBwZXQgY2FsbA0KLy8gVXNlOiBbIUxpc3RTaXRlTWFwIV0gaW5zdGVhZCBvZiBbW0xpc3RTaXRlTWFwXV0NCg0KLy8gQmFzZWQgT246DQovLyBWZXJzaW9uOiAwLjZoLjENCi8vIGFkZGFwdGVkIGJ5IFRyYVhhcyB0byBzdXBwb3J0IGF1dGhlbnRpY2F0aW9uIGFuZCBkZWxldGVkIGRvY3VtZW50cw0KLy8gRGF0ZTogMjAwNy4xMS4wOA0KLy8gamFyZWRjQGhvbmV5ZGV3ZGVzaWduLmNvbQ0KLy8NCi8vIFRoaXMgc25pcHBldCB3YXMgZGVzaWduZWQgdG8gc2hvdyBhIG5lc3RlZA0KLy8gbGlzdCBzaXRlIG1hcCB3aXRoIGVhY2ggcGFnZXRpdGxlIGJlaW5nIGENCi8vIGxpbmsgdG8gdGhhdCBwYWdlLiBJdCB3aWxsIG5vdCBpbmNsdWRlDQovLyB1bnB1Ymxpc2hlZCBmb2xkZXJzL3BhZ2VzIE9SIGl0cyBjaGlsZHJlbiwNCi8vIGV2ZW4gaWYgdGhlIGNoaWxkcmVuIEFSRSBwdWJsaXNoZWQuDQoNCi8vIENvbmZpZ3VyYXRpb24NCi8vDQovLyAkc2l0ZU1hcFJvb3QgW2ludF0NCi8vIFRoZSBwYXJlbnQgSUQgb2YgeW91ciByb290LiBEZWZhdWx0IDAuIENhbiBiZSBzZXQgaW4NCi8vIHNuaXBwZXQgY2FsbCB3aXRoIExTTV9yb290ICh0byBkb2MgaWQgMTAgZm9yIGV4YW1wbGUpOg0KLy8gWyFMaXN0U2l0ZU1hcD9MU01fcm9vdD0xMCFdDQokc2l0ZU1hcFJvb3QgPSAwOw0KDQovLyAkc2hvd0Rlc2NyaXB0aW9uIFt0cnVlIHwgZmFsc2VdDQovLyBTcGVjaWZ5IGlmIHlvdSB3b3VsZCBsaWtlIHRvIGluY2x1ZGUgdGhlIGRlc2NyaXB0aW9uDQovLyB3aXRoIHRoZSBwYWdlIHRpdGxlIGxpbmsuDQokc2hvd0Rlc2NyaXB0aW9uID0gdHJ1ZTsNCg0KLy8gJHRpdGxlT2ZMaW5rcyBbIHN0cmluZyBdDQovLyBXaGF0IGRhdGFiYXNlIGZpZWxkIGRvIHlvdSB3YW50IHRoZSB0aXRsZSBvZiB5b3VyIGxpbmtzIHRvIGJlPw0KLy8gVGhlIGRlZmF1bHQgaXMgcGFnZXRpdGxlIGJlY2F1c2UgaXQgaXMgYWx3YXlzIGEgdmFsaWQgKG5vdCBlbXB0eSkNCi8vIHZhbHVlLCBidXQgaWYgeW91IHByZWZlciBpdCBjYW4gYmUgYW55IG9mIHRoZSBmb2xsb3dpbmc6DQovLyBpZCwgcGFnZXRpdGxlLCBkZXNjcmlwdGlvbiwgcGFyZW50LCBhbGlhcywgbG9uZ3RpdGxlDQokdGl0bGVPZkxpbmtzID0gJ3BhZ2V0aXRsZSc7DQoNCi8vICRyZW1vdmVOZXdMaW5lcyBbIHRydWUgfCBmYWxzZSBdDQovLyBJZiB5b3Ugd2FudCBuZXcgbGluZXMgcmVtb3ZlZCBmcm9tIGNvZGUsIHNldCB0byB0cnVlLiBUaGlzIGlzIGdlbmVyYWxseQ0KLy8gYmV0dGVyIGZvciBJRSB3aGVuIGxpc3RzIGFyZSBzdHlsZWQgdmVydGljYWxseS4NCiRyZW1vdmVOZXdMaW5lcyA9IGZhbHNlOw0KDQovLyAkbWF4TGV2ZWxzIFsgaW50IF0NCi8vIE1heGltdW0gbnVtYmVyIG9mIGxldmVscyB0byBpbmNsdWRlLiBUaGUgZGVmYXVsdCAwIHdpbGwgYWxsb3cgYWxsDQovLyBsZXZlbHMuIEFsc28gc2V0dGFibGUgd2l0aCBzbmlwcGV0IHZhcmlhYmxlIExTTV9sZXZlbHM6DQovLyBbIUxpc3RTaXRlTWFwP0xTTV9sZXZlbHM9MiFdDQokbWF4TGV2ZWxzID0gMDsNCg0KLy8gJHNlbGZBc0xpbmsgWyB0cnVlIHwgZmFsc2UgXQ0KLy8gRGVmaW5lIGlmIHRoZSBjdXJyZW50IHBhZ2Ugc2hvdWxkIGJlIGEgbGluayAodHJ1ZSkgb3Igbm90DQovLyAoZmFsc2UpDQokc2VsZkFzTGluayA9IGZhbHNlOw0KDQovLyAkc2hvd1VucHVicyBbIHRydWUgfCBmYWxzZSBdDQovLyBEZWNpZGUgdG8gaW5jbHVkZSBpdGVtcyBpbiB1bnB1Ymxpc2hlZCBmb2xkZXJzLiBUaGlzIHdpbGwgc2hvdyB0aGUNCi8vIHVucHVibGlzaGVkIGl0ZW1zIGFzIHdlbGwuIE5vIGxpbmtzIHdpbGwgYmUgbWFkZSBmb3IgdGhlIHVucHVibGlzaGVkIGl0ZW1zDQovLyBidXQgdGhleSB3aWxsIGJlIHNob3duIGluIHRoZSBzdHJ1Y3R1cmUuIFlvdSB3aWxsIG5vdCBsaWtlbHkgd2FudCB0byBkbw0KLy8gdGhpcyBidXQgdGhlIG9wdGlvbiBpcyB5b3Vycy4NCiRzaG93VW5wdWJzID0gZmFsc2U7DQoNCi8vIFN0eWxlcw0KLy8NCi8vIC5MU01fY3VycmVudFBhZ2UgICAgc3BhbiBzdXJyb3VuZGluZyBjdXJyZW50IHBhZ2UgaWYgJHNlbGZBc0xpbmsgaXMgZmFsc2UNCi8vIC5MU01fZGVzY3JpcHRpb24gICAgZGVzY3JpcHRpb24gb2YgcGFnZQ0KLy8gLkxTTV9OICAgICAgICAgICAgICB1bCBzdHlsZSB3aGVyZSBOIGlzIHRoZSBsZXZlbCBvZiBuZXN0ZWQgbGlzdC0gc3RhcnRpbmcgYXQgMA0KDQovLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQovLyBFbmQgY29uZmlnLCB0aGUgcmVzdCB0YWtlcyBjYXJlIG9mIGl0c2VsZiAjDQovLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCi8vIEluaXRpYWxpemUNCiRzaXRlTWFwUm9vdCA9IChpc3NldCgkTFNNX3Jvb3QpKT8gJExTTV9yb290IDogJHNpdGVNYXBSb290IDsNCiRtYXhMZXZlbHMgPSAoaXNzZXQoJExTTV9sZXZlbHMpKT8gJExTTV9sZXZlbHMgOiAkbWF4TGV2ZWxzIDsNCiRpZSA9ICgkcmVtb3ZlTmV3TGluZXMpID8gIiIgOiAiXG4iIDsNCg0KLy8gT3ZlcmNvbWUgc2luZ2xlIHVzZSBsaW1pdGF0aW9uIG9uIGZ1bmN0aW9ucw0KZ2xvYmFsICRNYWtlTWFwRGVmaW5lZDsNCg0KaWYoIWlzc2V0KCRNYWtlTWFwRGVmaW5lZCkpDQp7DQogIGZ1bmN0aW9uIE1ha2VNYXAoJGxpc3RQYXJlbnQsICRsaXN0TGV2ZWwsICRkZXNjcmlwdGlvbiwgJHRpdGxlT2ZMaW5rcywgJG1heExldmVscywgJHN1LCAkaWUpDQogIHsNCiAgICBnbG9iYWwgJGV0b21pdGU7DQogICAgJGNoaWxkcmVuID0gJGV0b21pdGUtPmdldEFsbENoaWxkcmVuKCRsaXN0UGFyZW50LCAnbWVudWluZGV4JywgJ0FTQycsICdpZCwgcGFnZXRpdGxlLCBkZXNjcmlwdGlvbiwgcGFyZW50LCBhbGlhcywgbG9uZ3RpdGxlLCBwdWJsaXNoZWQnKTsNCiAgICAkb3V0cHV0IC49ICRpZS4iPHVsIGNsYXNzPVwiTFNNX3skbGlzdExldmVsfVwiPiIuJGllOw0KICAgIGZvcmVhY2goJGNoaWxkcmVuIGFzICRjaGlsZCkNCiAgICB7DQogICAgICAvLyBDaGVja3MgaWYgdGhlIGRvY3VtZW50IGRvZXNuJ3QgcmVxdWlyZSBhdXRoZW50aWNhdGlvbiBvciBpcyBkZWxldGVkDQogICAgICBpZigoICgkZXRvbWl0ZS0+Y2hlY2tQZXJtaXNzaW9ucygkY2hpbGRbJ2lkJ10pKSB8fCAoISRjaGlsZFsnYXV0aGVudGljYXRlJ10gKSkgJiYgKCEkY2hpbGRbJ2RlbGV0ZWQnXSApKQ0KICAgICAgew0KICAgICAgICAvLyBza2lwIHVucHVicyB1bmxlc3MgZGVzaXJlZA0KICAgICAgICBpZighJHN1ICYmICEkY2hpbGRbJ3B1Ymxpc2hlZCddKQ0KICAgICAgICB7DQogICAgICAgICAgY29udGludWU7DQogICAgICAgIH0NCiAgICAgICAgLy8gZm9yIFhIVE1MIGNvbXBsaWFuY2Ugd2UgbmVlZCB0byBpbnNlcnQgJm5ic3A7IGluIGVtcHR5IGRlc2NyaXB0aW9ucw0KICAgICAgICBpZigkY2hpbGRbJ2Rlc2NyaXB0aW9uJ10gPT0gbnVsbCkNCiAgICAgICAgew0KICAgICAgICAgICRjaGlsZFsnZGVzY3JpcHRpb24nXSA9ICImbmJzcDsiOw0KICAgICAgICB9DQogICAgICAgICRkZXNjVGV4dCA9ICgkZGVzY3JpcHRpb24pID8gIiZuYnNwOzombmJzcDs8c3BhbiBjbGFzcz1cIkxTTV9kZXNjcmlwdGlvblwiPnskY2hpbGRbJ2Rlc2NyaXB0aW9uJ119PC9zcGFuPiIgOiAiIjsNCiAgICAgICAgJG91dHB1dCAuPSAnPGxpPic7DQogICAgICAgIGlmKCEkc2VsZkFzTGluayAmJiAoJGNoaWxkWydpZCddID09ICRldG9taXRlLT5kb2N1bWVudElkZW50aWZpZXIpKQ0KICAgICAgICB7DQogICAgICAgICAgJG91dHB1dCAuPSAiPHNwYW4gY2xhc3M9XCJMU01fY3VycmVudFBhZ2VcIj57JGNoaWxkWydwYWdldGl0bGUnXX08L3NwYW4+IjsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlaWYoISRjaGlsZFsncHVibGlzaGVkJ10pDQogICAgICAgIHsNCiAgICAgICAgICAkb3V0cHV0IC49ICI8c3BhbiBjbGFzcz1cIkxTTV91bnB1YlBhZ2VcIj57JGNoaWxkWydwYWdldGl0bGUnXX08L3NwYW4+IjsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAkb3V0cHV0IC49ICI8YSBocmVmPVwiW357JGNoaWxkWydpZCddfX5dXCIgdGl0bGU9XCJ7JGNoaWxkWyR0aXRsZU9mTGlua3NdfVwiPnskY2hpbGRbJ3BhZ2V0aXRsZSddfTwvYT4iOw0KICAgICAgICB9DQogICAgICAgICRvdXRwdXQgLj0gJGRlc2NUZXh0Ow0KICAgICAgICBpZiAoJGV0b21pdGUtPmdldEFsbENoaWxkcmVuKCRjaGlsZFsnaWQnXSkgJiYgKCgkbWF4TGV2ZWxzID09IDApIHx8ICgkbWF4TGV2ZWxzID4gJGxpc3RMZXZlbCsxICkpKQ0KICAgICAgICB7DQogICAgICAgICAgJG91dHB1dCAuPSBNYWtlTWFwKCRjaGlsZFsnaWQnXSwgJGxpc3RMZXZlbCsrLCAkZGVzY3JpcHRpb24sICR0aXRsZU9mTGlua3MsICRtYXhMZXZlbHMsICRzdSwgJGllKTsNCiAgICAgICAgfQ0KICAgICAgICAkb3V0cHV0IC49ICI8L2xpPiIuJGllOw0KICAgICAgfQ0KICAgIH0NCiAgICAkb3V0cHV0IC49ICI8L3VsPiIuJGllOw0KICAgIHJldHVybiAkb3V0cHV0Ow0KICB9DQogICRNYWtlTWFwRGVmaW5lZCA9IHRydWU7DQp9DQoNCiRvdXRwdXQgLj0gJGllLiI8IS0tIEJFR0lOOjpTaXRlIE1hcCAtLT4iOw0KJG91dHB1dCAuPSBNYWtlTWFwKCRzaXRlTWFwUm9vdCwgMCwgJHNob3dEZXNjcmlwdGlvbiwgJHRpdGxlT2ZMaW5rcywgJG1heExldmVscywgJHNob3dVbnB1YnMsICRpZSk7DQokb3V0cHV0IC49ICI8IS0tIEVORDo6U2l0ZSBNYXAgLS0+Ii4kaWU7DQpyZXR1cm4gJG91dHB1dDsNCg==';
$this->snippetCache['Copyright']='LyoNClNuaXBwZXQgbmFtZTogQ29weXJpZ2h0DQpTbmlwcGV0IGRlc2NyaXB0aW9uOiBSZXR1cm5zIGEgY29weXJpZ2h0IHN0YXRlbWVudA0KUmV2aXNpb246IDEuMSBzaGlwcyB3aXRoIEV0b21pdGUgMC42LjEtRmluYWwNCg0KRGVzY3JpcHRpb246DQogIFJldHVybnMgYSBjb3B5cmlnaHQgc3RhdGVtZW50IG9mIHRoZSBmb3JtOg0KICAgICdDb3B5cmlnaHQgKGMpIDIwMDYgYnkgTGxveWQgQm9ycmV0dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4nDQogICAgJ0NvcHlyaWdodCAoYykgMjAwNS0yMDA2IGJ5IExsb3lkIEJvcnJldHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuJw0KICAgICdDb3B5cmlnaHQgKGMpIDIwMDUtMjAwNi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4nDQoNCiAgKE5vdGU6IHRoZSAoYykgaXMgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGNvcHlyaWdodCBzeW1ib2wgY2hhcmFjdGVyLg0KICAgICAgICAgdGhlICctJyBpcyByZXBsYWNlZCB3aXRoIGFuIGVuIGRhc2guKQ0KDQogIFRoZSB5ZWFyIHJhbmdlIGJlaW5nIGZyb20gZWl0aGVyIGEgc2l0ZSBzdGFydCB5ZWFyIChpZiBwcm92aWRlZCkgDQogIHRvIHRoZSBjdXJyZW50IHllYXIsIG9yIGZyb20gdGhlIHllYXIgdGhlIGRvY3VtZW50IHdhcyBjcmVhdGVkIA0KICB0byB0aGUgY3VycmVudCB5ZWFyLiBBbGwgeWVhciB2YWx1ZXMgYXJlIGJhc2VkIG9uIGxvY2FsIHRpbWUgDQogIHVzaW5nIHRoZSBFdG9taXRlIHNlcnZlciBvZmZzZXQgdGltZSBjb25maWd1cmF0aW9uIHNldHRpbmcuDQogIFRoZSBjb3B5cmlnaHQgaG9sZGVyIGNhbiBiZSB0aGUgb25lIGVudGl0eSBmb3IgdGhlIA0KICB3aG9sZSB3ZWIgc2l0ZSAoaWYgcHJvdmlkZWQpLCBvciB0aGUgYXV0aG9yIG9mIHRoZSBjdXJyZW50DQogIGRvY3VtZW50IChpZiBwcm92aWRlZCkuDQoNClNuaXBwZXQgQXV0aG9yOg0KICBMbG95ZCBCb3JyZXR0IChsbG95ZEBib3JyZXR0LmlkLmF1KQ0KICANClNuaXBwZXQgQ2F0ZWdvcnk6DQogIE1pc2NlbGxhbmVvdXMNCg0KU2VlIGluIHVzZSBhdDoNCiAgd3d3LnJheWRvbi5jb20uYXUgICAgICAgICAgIA0KDQpVc2FnZToNCiAgSW5zZXJ0IFtbQ29weXJpZ2h0XV0gYW55d2hlcmUgaW4gdGhlIGFwcHJvcHJpYXRlIHNlY3Rpb24NCiAgb2YgeW91ciB0ZW1wbGF0ZS4gKFVzdWFsbHkgdGhlIGZvb3Rlci4pDQoqLw0KDQovLyAqKiogQ29uZmlndXJhdGlvbiBTZXR0aW5ncyAqKioNCg0KLy8gU3RhcnQgWWVhciBvZiB0aGUgd2ViIHNpdGUuDQovLyBUbyB1c2UgdGhlIGRvY3VtZW50IGNyZWF0aW9uIGRhdGUsIHNldCB0aGlzIHRvICcnDQokc2l0ZV9zdGFydF95ZWFyID0gJyc7DQoNCi8vIENvcHlyaWdodCBob2xkZXIgZm9yIHRoZSB3aG9sZSB3ZWIgc2l0ZS4NCi8vIFRvIHVzZSB0aGUgZG9jdW1lbnQgYXV0aG9yIGRldGFpbHMgb2YgZWFjaCBkb2N1bWVudCwgc2V0IHRoaXMgdG8gJycNCiRzaXRlX2NvcHlob2xkZXIgPSAkZXRvbWl0ZS0+Y29uZmlnWydzaXRlX25hbWUnXTsNCg0KLy8gKioqIFN0YXJ0DQoNCi8vIEdldCB0aGUgZG9jdW1lbnQgZGV0YWlscy4NCg0KJGRvY0luZm8gPSAkZXRvbWl0ZS0+Z2V0RG9jdW1lbnQoJGV0b21pdGUtPmRvY3VtZW50SWRlbnRpZmllcik7DQoNCi8vICoqKiBBVVRIT1IgKioqDQppZiAoJHNpdGVfY29weWhvbGRlciA9PSAnJykgew0KICAgJGF1dGhvcmlkID0gJGRvY0luZm9bJ2NyZWF0ZWRieSddOw0KICAgJHRibCA9ICRldG9taXRlLT5kYkNvbmZpZ1snZGJhc2UnXS4iLiIuJGV0b21pdGUtPmRiQ29uZmlnWyd0YWJsZV9wcmVmaXgnXS4idXNlcl9hdHRyaWJ1dGVzIjsNCiAgICRxdWVyeSA9ICJTRUxFQ1QgZnVsbG5hbWUgRlJPTSAkdGJsIFdIRVJFICR0YmwuaWQgPSAkYXV0aG9yaWQiOyANCiAgICRycyA9ICRldG9taXRlLT5kYlF1ZXJ5KCRxdWVyeSk7DQogICAkbGltaXQgPSAkZXRvbWl0ZS0+cmVjb3JkQ291bnQoJHJzKTsgDQogICBpZigkbGltaXQ9MSkgew0KICAgICAgJHJlc291cmNlYXV0aG9yID0gJGV0b21pdGUtPmZldGNoUm93KCRycyk7IA0KICAgICAgJGF1dGhvcm5hbWUgPSAkcmVzb3VyY2VhdXRob3JbJ2Z1bGxuYW1lJ107ICANCiAgIH0NCiAgIC8vIFRyaW0gYW5kIHJlcGxhY2UgZG91YmxlIHF1b3RlcyB3aXRoIGVudGl0eQ0KICAgJGNvcHlob2xkZXIgPSBzdHJfcmVwbGFjZSgnIicsICcmIzM0OycsIHRyaW0oJGF1dGhvcm5hbWUpKTsNCn0gZWxzZSB7DQogICAkY29weWhvbGRlciA9ICRzaXRlX2NvcHlob2xkZXI7DQp9DQoNCi8vICoqKiBDT1BZUklHSFQgKioqDQovLyBnZXQgdGhlIEV0b21pdGUgc2VydmVyIG9mZnNldCB0aW1lIGluIHNlY29uZHMNCiRzZXJ2ZXJfb2Zmc2V0X3RpbWUgPSAkZXRvbWl0ZS0+Y29uZmlnWydzZXJ2ZXJfb2Zmc2V0X3RpbWUnXTsNCmlmICghJHNlcnZlcl9vZmZzZXRfdGltZSkgew0KICAkc2VydmVyX29mZnNldF90aW1lID0gMDsNCn0NCi8vIGdldCB0aGUgY3VycmVudCB0aW1lIGFuZCBhcHBseSB0aGUgb2Zmc2V0DQokdGltZXN0YW1wID0gdGltZSgpICsgJHNlcnZlcl9vZmZzZXRfdGltZTsNCi8vIFNldCB0aGUgY3VycmVudCB5ZWFyDQokdG9kYXlfeWVhciA9IGRhdGUoJ1knLCR0aW1lc3RhbXApOw0KJGNyZWF0ZWRvbiA9IGRhdGUoJ1knLCRkb2NJbmZvWydjcmVhdGVkb24nXSk7DQppZiAoJHNpdGVfc3RhcnRfeWVhciA9PSAnJykgew0KICAgaWYgKCR0b2RheV95ZWFyICE9ICRjcmVhdGVkb24pIHsNCiAgICAgICRjb3B5ZGF0ZSA9ICRjcmVhdGVkb24uIiYjODIxMTsiLiR0b2RheV95ZWFyOw0KICAgfSBlbHNlIHsNCiAgICAgICRjb3B5ZGF0ZSA9ICR0b2RheV95ZWFyOw0KICAgfQ0KfSBlbHNlIHsNCiAgIGlmICgkdG9kYXlfeWVhciAhPSAkc2l0ZV9zdGFydF95ZWFyKSB7DQogICAgICAkY29weWRhdGUgPSAkc2l0ZV9zdGFydF95ZWFyLiImIzgyMTE7Ii4kdG9kYXlfeWVhcjsNCiAgIH0gZWxzZSB7DQogICAgICAkY29weWRhdGUgPSAkdG9kYXlfeWVhcjsNCiAgIH0NCn0NCmlmICgkY29weWhvbGRlciA9PSAnJykgew0KICAgJGNvcHluYW1lID0gJGNvcHlob2xkZXI7DQp9IGVsc2Ugew0KICAgJGNvcHluYW1lID0gIiBieSAiLiRjb3B5aG9sZGVyOw0KfQ0KDQovLyAqKiogQlVJTEQgQ09QWVJJR0hUIFNUQVRFTUVOVCAmIFJFVFVSTiBSRVNVTFRTICoqKg0KDQokQ29weXJpZ2h0ID0gIkNvcHlyaWdodCAmIzE2OTsgIjsNCiRDb3B5cmlnaHQgLj0gJGNvcHlkYXRlLiRjb3B5bmFtZS4iLiBBbGwgcmlnaHRzIHJlc2VydmVkLiI7DQoNCnJldHVybiAkQ29weXJpZ2h0Ow==';
$this->snippetCache['GoogleSiteMap_XML']='LyoqDQogKiBHb29nbGVTaXRlTWFwX1hNTCBTbmlwcGV0IGZvciBFdG9taXRlIENNUw0KICogVmVyc2lvbiAwLjggMjAwNi0xMS0xNw0KICoNCiAqIFBhcmFtZXRlcnM6DQogKiBbIUdvb2dsZVNpdGVNYXBfWE1MP3ZhbGlkYXRlPXRydWUhXSBvciBbIUdvb2dsZVNpdGVNYXBfWE1MP3ZhbGlkYXRlPTEhXQ0KICogdGVsbHMgdGhlIHNuaXBwZXQgdG8gb3V0cHV0IHRoZSBhZGRpdGlvbmFsIGhlYWRlcnMgcmVxdWlyZWQgdG8gdmFsaWRhdGUgDQogKiB5b3VyIFNpdGVtYXAgZmlsZSBhZ2FpbnN0IGEgc2NoZW1hLg0KICoNCiAqIFVzZWFnZToNCiAqIENyZWF0ZSBhIHNuaXBwZXQ6IEdvb2dsZVNpdGVNYXBfWE1MDQogKiB3aXRoIHRoZSBjb250ZW50IG9mIHRoaXMgZmlsZS4NCiAqIFVwZGF0ZSB0aGUgY29uZmlndXJhdGlvbiBvcHRpb25zIGJlbG93IHRvIHN1aXQgeW91ciBuZWVkcy4NCiAqIENyZWF0ZSBhIHRlbXBsYXRlOiBHb29nbGVTaXRlTWFwX1RlbXBsYXRlIA0KICogd2l0aCB0aGUgY29udGVudCAiWyFHb29nbGVTaXRlTWFwX1hNTCFdIi4NCiAqIENyZWF0ZSBhIHBhZ2UgaW4geW91ciByZXBvc2l0b3J5OiBHb29nbGUgU2l0ZSBNYXANCiAqIHdpdGggbm8gY29udGVudCwgdGhlIGFsaWFzICJnb29nbGUtc2l0ZW1hcCIsDQogKiB1c2luZyB0aGUgR29vZ2xlU2l0ZU1hcF9UZW1wbGF0ZSwgbm90IHNlYXJjaGFibGUsDQogKiBub3QgY2FjaGVhYmxlLCB3aXRoIGNvbnRlbnQgdHlwZSAidGV4dC94bWwiLg0KICoNCiAqIEdvdG8gdGhlIEdvb2dsZSBXZWJhc3RlciBUb29scyBzaXRlIGF0IGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vd2VibWFzdGVycy90b29scy8NCiAqIENyZWF0ZSBhbiBhY2NvdW50LCBvciBsb2dpbiB1c2luZyB5b3VyIGV4aXN0aW5nIGFjY291bnQuDQogKiBFbnRlciBodHRwOi8vd3d3Ljx5b3VyIGRvbWFpbiBuYW1lPi8gaW4gdGhlIGFkZCBzaXRlIGJveCBhbmQgY2xpY2sgT0suDQogKiBDbGljayBvbiAiVmVyaWZ5IHlvdXIgc2l0ZSIuDQogKiBDaG9vc2UgIkFkZCBhIE1FVEEgdGFnIiBhcyB5b3VyIHZlcmlmaWNhdGlvbiBvcHRpb24uDQogKiBBZGQgdGhlIGdlbmVyYXRlZCBtZXRhIHRhZyB0byB0aGUgaGVhZCBzZWN0aW9uIG9mIHlvdXIgaG9tZSBwYWdlIHRlbXBsYXRlLg0KICogQmFjayBpbiBHb29nbGUgV2VibWFzdGVyIFRvb2xzLCBjbGljayBvbiAiVmVyaWZ5Ii4NCiAqIENsaWNrIG9uIHRoZSAiU2l0ZW1hcHMiIGJ1dHRvbi4NCiAqIENsaWNrIG9uICJBZGQgYSBTaXRlbWFwIi4NCiAqIFNlbGVjdCAiQWRkIEdlbmVyYWwgV2ViIFNpdGVtYXAiLg0KICogRW50ZXIgImh0dHA6Ly93d3cuPHlvdXIgZG9tYWluIG5hbWU+L2dvb2dsZS1zaXRlbWFwLmh0bSIgYXMgeW91ciBzaXRlbWFwIFVSTC4NCiAqIENsaWNrIG9uICJBZGQgV2ViIFNpdGVtYXAiLg0KICoNCiAqIA0KICogUnlhbiBOdXR0IC0gaHR0cDovL2Jsb2cubnV0dC5uZXQNCiAqIHYwLjEgLSBKdW5lIDQsIDIwMDUNCiAqIHYwLjIgLSBKdW5lIDUsIDIwMDUgLSBGaXhlZCBhIHN0dXBpZCBtaXN0YWtlIDotKQ0KICogDQogKiBDaGFuZ2VzIGJ5IExsb3lkIEJvcnJldHQgLSBodHRwOi8vd3d3LmJvcnJldHQuaWQuYXUNCiAqDQogKiB2MC4zIC0gU2VwIDIyLCAyMDA1DQogKiBPbmx5IGxpc3Qgc2VhcmNoYWJsZSBwYWdlcyAoTW9kIHN1Z2dlc3RlZCBieSBtcGx4KQ0KICogQWRkZWQgY29uZmlndXJhdGlvbiBzZXR0aW5ncy4NCiAqIE1hZGUgdGhlIHNpdGUgVVJMIGEgY29uZmlndXJhdGlvbiBvcHRpb24uDQogKiBNYWRlIGRpc3BsYXlpbmcgbGFzdG1vZGRhdGUsIHByaW9yaXR5IGFuZC9vciBjaGFuZ2VmcmVxIG9wdGlvbmFsLg0KICogQWRkZWQgYWJpbGl0eSB0byBkaXNwbGF5IGxvbmcgZGF0ZSAmIHRpbWUgZm9yIGxhc3Rtb2RkYXRlDQogKiBNYWRlIHRoZSBsb25nIG9yIHNob3J0IHRpbWVmb3JtYXQgb3B0aW9uYWwuDQogKiANCiAqIHYwLjQgLSAwNS1GZWItMjAwNg0KICogQ2hhbmdlZCB0aGUgc25pcHBldCB0byBvdXRwdXQgdGhlIGxvY2FsIHRpbWUgZm9yIGFsbCBkYXRlIHZhbHVlcw0KICogYmFzZWQgb24gdGhlIEV0b21pdGUgc2VydmVyIG9mZnNldCB0aW1lDQogKiANCiAqIHYwLjUgLSAxNS1GZWItMjAwNg0KICogRml4ZWQgaW5jb3JyZWN0IGxvY2FsIEdNVCBvZmZzZXQgdmFsdWUNCiAqIA0KICogdjAuNiAtIDctQXByLTIwMDYNCiAqIEdldCB0aGUgYmFzZSBVUkwgZnJvbSBFdG9taXRlIGluc3RlYWQgb2YgaXQgYmVpbmcgYSBjb25maWd1cmF0aW9uIG9wdGlvbi4NCiAqIA0KICogdjAuNyAtIDMwLUFwci0yMDA2DQogKiBHZXQgdGhlIGJhc2UgVVJMIGZyb20gRXRvbWl0ZSB1c2luZyB0aGUgbmV3IGF2YWlsYWJsZSANCiAqIG1ldGhvZCBidWlsdCBpbiB0byBFdG9taXRlIDAuNi4xIEZpbmFsLiBJZiB1c2luZyBhbiBlYXJsaWVyDQogKiB2ZXJzaW9uIG9mIEV0b21pdGUsIHlvdSdsbCBzdGlsbCBuZWVkIHRvIHByb3ZpZGUgdGhlIFVSTA0KICogYXMgYSBjb25maWd1cmF0aW9uIG9wdGlvbi4NCiAqIA0KICogdjAuOCAtIDE3LU5vdi0yMDA2DQogKiBVcGRhdGVkIHRvIGlkZW50aWZ5IGl0c2VsZiBhcyB1c2luZyB0aGUgU2l0ZW1hcCAwLjkgcHJvdG9jb2wuDQogKiBBZGRlZCBhYmlsaXR5IHRvIGZvcmNlIHRoZSBjaGFuZ2UgZnJlcXVlbmN5IHRvIGEgc2V0IHZhbHVlIGZvciBhbGwgZG9jdW1lbnRzLg0KICogQWRkZWQgYWJpbGl0eSB0byBvdXRwdXQgdGhlIGFkZGl0aW9uYWwgaGVhZGVycyByZXF1aXJlZCB0byB2YWxpZGF0ZSB0aGUgc2l0ZW1hcCBmb3JtYXQuDQogKiBBZGRpdGlvbmFsIGNvbW1lbnRzIGFkZGVkLg0KICogQ29kZSBsYXlvdXQgbWFkZSBjb25zaXN0ZW50Lg0KICogDQogKiBCYXNlZCBvbiB0aGUgTGlzdFNpdGVNYXAgc25pcHBldCBieQ0KICogSmFyZWREQw0KICogDQogKiBkYXRlZGlmZiBmdW5jdGlvbiBmcm9tDQogKiB3d3cuaWxvdmVqYWNrZGFuaWVscy5jb20NCiAqLyANCg0KLy8gT3ZlcmNvbWUgc2luZ2xlIHVzZSBsaW1pdGF0aW9uIG9uIGZ1bmN0aW9ucw0KZ2xvYmFsICRNYWtlTWFwRGVmaW5lZDsNCg0KLy8gR2V0IHRoZSB2YWxpZGF0ZSBwYXJhbWV0ZXIsIGlmIGFueQ0KJHZhbGlkYXRlc2NoZW1hID0gZmFsc2U7DQppZiAoaXNzZXQoJHZhbGlkYXRlKSkgew0KICAgaWYgKCgkdmFsaWRhdGUgPT0gIjEiKSB8fCAoJHZhbGlkYXRlID09ICJ0cnVlIikpIHsNCiAgICAgICAkdmFsaWRhdGVzY2hlbWEgPSB0cnVlOw0KICAgfQ0KfQ0KDQovLyBEZXRlcm1pbmUgdmFsdWVzIHJlcXVpcmVkIHRvIGNvbnZlcnQgdGhlIGxhc3Rtb2QgZGF0ZSBhbmQNCi8vIHRpbWUgdG8gbG9jYWwgdGltZS4gDQovLyBnZXQgdGhlIEV0b21pdGUgc2VydmVyIG9mZnNldCB0aW1lIGluIHNlY29uZHMNCmdsb2JhbCAkc2VydmVyX29mZnNldF90aW1lOw0KZ2xvYmFsICRHTVRfdmFsdWU7DQokc2VydmVyX29mZnNldF90aW1lID0gJGV0b21pdGUtPmNvbmZpZ1snc2VydmVyX29mZnNldF90aW1lJ107DQppZiAoISRzZXJ2ZXJfb2Zmc2V0X3RpbWUpIHsNCiAgICAkc2VydmVyX29mZnNldF90aW1lID0gMDsNCn0gDQoNCi8vIEdldCB0aGUgc2VydmVyIEdNVCBvZmZzZXQgaW4gc2Vjb25kcw0KJEdNVF9vZmZzZXQgPSBkYXRlKCJPIik7DQokR01UX2hyID0gc3Vic3RyKCRHTVRfb2Zmc2V0LCAxLCAyKTsNCiRHTVRfbWluID0gc3Vic3RyKCRHTVRfb2Zmc2V0LCA0LCAyKTsNCiRHTVRfc2lnbiA9IHN1YnN0cigkR01UX29mZnNldCwgMCwgMSk7DQokR01UX3NlY3MgPSAoaW50dmFsKCRHTVRfaHIpICogMzYwMCkgKyAoaW50dmFsKCRHTVRfbWluKSAqIDYwKTsNCmlmICgkR01UX3NpZ24gPT0gJy0nKSB7DQogICAgJEdNVF9zZWNzID0gJEdNVF9zZWNzICogKC0xKTsNCn0gDQoNCi8vIEdldCB0aGUgbG9jYWwgR01UIG9mZnNldCBpbiBzZWNvbmRzDQokR01UX2xvY2FsX3NlY29uZHMgPSAkR01UX3NlY3MgKyAkc2VydmVyX29mZnNldF90aW1lOw0KJEdNVF9sb2NhbF9zZWNzID0gYWJzKCRHTVRfbG9jYWxfc2Vjb25kcyk7IA0KLy8gcm91bmQgZG93biB0byB0aGUgbnVtYmVyIG9mIGhvdXJzDQokR01UX2xvY2FsX2hvdXJzID0gaW50dmFsKCRHTVRfbG9jYWxfc2VjcyAvIDM2MDApOyANCi8vIHJvdW5kIGRvd24gdG8gdGhlIG51bWJlciBvZiBtaW51dGVzDQokR01UX2xvY2FsX21pbnV0ZXMgPSBpbnR2YWwoKCRHTVRfbG9jYWxfc2VjcyAtICgkR01UX2xvY2FsX2hvdXJzICogMzYwMCkpIC8gNjApOw0KaWYgKCRHTVRfbG9jYWxfc2Vjb25kcyA8IDApIHsNCiAgICAkR01UX3ZhbHVlID0gIi0iOw0KfSBlbHNlIHsNCiAgICAkR01UX3ZhbHVlID0gIisiOw0KfSANCiRHTVRfdmFsdWUgLj0gc3ByaW50ZigiJTAyZDolMDJkIiwgJEdNVF9sb2NhbF9ob3VycywgJEdNVF9sb2NhbF9taW51dGVzKTsNCg0KaWYgKCFmdW5jdGlvbl9leGlzdHMoZGF0ZWRpZmYpKSB7DQogICAgZnVuY3Rpb24gZGF0ZWRpZmYoJGludGVydmFsLCAkZGF0ZWZyb20sICRkYXRldG8sICR1c2luZ190aW1lc3RhbXBzID0gZmFsc2UpDQogICAgew0KICAgICAgICAvKioNCiAgICAgICAgICogJGludGVydmFsIGNhbiBiZToNCiAgICAgICAgICogeXl5eSAtIE51bWJlciBvZiBmdWxsIHllYXJzDQogICAgICAgICAqIHEgLSBOdW1iZXIgb2YgZnVsbCBxdWFydGVycw0KICAgICAgICAgKiBtIC0gTnVtYmVyIG9mIGZ1bGwgbW9udGhzDQogICAgICAgICAqIHkgLSBEaWZmZXJlbmNlIGJldHdlZW4gZGF5IG51bWJlcnMNCiAgICAgICAgICogKGVnIDFzdCBKYW4gMjAwNCBpcyAiMSIsIHRoZSBmaXJzdCBkYXkuIDJuZCBGZWIgMjAwMyBpcyAiMzMiLiBUaGUgZGF0ZWRpZmYgaXMgIi0zMiIuKQ0KICAgICAgICAgKiBkIC0gTnVtYmVyIG9mIGZ1bGwgZGF5cw0KICAgICAgICAgKiB3IC0gTnVtYmVyIG9mIGZ1bGwgd2Vla2RheXMNCiAgICAgICAgICogd3cgLSBOdW1iZXIgb2YgZnVsbCB3ZWVrcw0KICAgICAgICAgKiBoIC0gTnVtYmVyIG9mIGZ1bGwgaG91cnMNCiAgICAgICAgICogbiAtIE51bWJlciBvZiBmdWxsIG1pbnV0ZXMNCiAgICAgICAgICogcyAtIE51bWJlciBvZiBmdWxsIHNlY29uZHMgKGRlZmF1bHQpDQogICAgICAgICAqLw0KDQogICAgICAgIGlmICghJHVzaW5nX3RpbWVzdGFtcHMpIHsNCiAgICAgICAgICAgICRkYXRlZnJvbSA9IHN0cnRvdGltZSgkZGF0ZWZyb20sIDApOw0KICAgICAgICAgICAgJGRhdGV0byA9IHN0cnRvdGltZSgkZGF0ZXRvLCAwKTsNCiAgICAgICAgfSANCg0KICAgICAgICAkZGlmZmVyZW5jZSA9ICRkYXRldG8gLSAkZGF0ZWZyb207IC8vIERpZmZlcmVuY2UgaW4gc2Vjb25kcw0KICAgICAgICANCiAgICAgICAgc3dpdGNoICgkaW50ZXJ2YWwpIHsNCiAgICAgICAgICAgIGNhc2UgJ3l5eXknOiAvLyBOdW1iZXIgb2YgZnVsbCB5ZWFycw0KICAgICAgICAgICAgICAgICR5ZWFyc19kaWZmZXJlbmNlID0gZmxvb3IoJGRpZmZlcmVuY2UgLyAzMTUzNjAwMCk7DQogICAgICAgICAgICAgICAgaWYgKG1rdGltZShkYXRlKCJIIiwgJGRhdGVmcm9tKSwgZGF0ZSgiaSIsICRkYXRlZnJvbSksIGRhdGUoInMiLCAkZGF0ZWZyb20pLCBkYXRlKCJuIiwgJGRhdGVmcm9tKSwgZGF0ZSgiaiIsICRkYXRlZnJvbSksIGRhdGUoIlkiLCAkZGF0ZWZyb20pICsgJHllYXJzX2RpZmZlcmVuY2UpID4gJGRhdGV0bykgew0KICAgICAgICAgICAgICAgICAgICAkeWVhcnNfZGlmZmVyZW5jZS0tOw0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgaWYgKG1rdGltZShkYXRlKCJIIiwgJGRhdGV0byksIGRhdGUoImkiLCAkZGF0ZXRvKSwgZGF0ZSgicyIsICRkYXRldG8pLCBkYXRlKCJuIiwgJGRhdGV0byksIGRhdGUoImoiLCAkZGF0ZXRvKSwgZGF0ZSgiWSIsICRkYXRldG8pIC0gKCR5ZWFyc19kaWZmZXJlbmNlICsgMSkpID4gJGRhdGVmcm9tKSB7DQogICAgICAgICAgICAgICAgICAgICR5ZWFyc19kaWZmZXJlbmNlKys7DQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAkZGF0ZWRpZmYgPSAkeWVhcnNfZGlmZmVyZW5jZTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSAicSI6IC8vIE51bWJlciBvZiBmdWxsIHF1YXJ0ZXJzDQogICAgICAgICAgICAgICAgJHF1YXJ0ZXJzX2RpZmZlcmVuY2UgPSBmbG9vcigkZGlmZmVyZW5jZSAvIDgwMzUyMDApOw0KICAgICAgICAgICAgICAgIHdoaWxlIChta3RpbWUoZGF0ZSgiSCIsICRkYXRlZnJvbSksIGRhdGUoImkiLCAkZGF0ZWZyb20pLCBkYXRlKCJzIiwgJGRhdGVmcm9tKSwgZGF0ZSgibiIsICRkYXRlZnJvbSkgKyAoJHF1YXJ0ZXJzX2RpZmZlcmVuY2UgKiAzKSwgZGF0ZSgiaiIsICRkYXRldG8pLCBkYXRlKCJZIiwgJGRhdGVmcm9tKSkgPCAkZGF0ZXRvKSB7DQogICAgICAgICAgICAgICAgICAgICRtb250aHNfZGlmZmVyZW5jZSsrOw0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgJHF1YXJ0ZXJzX2RpZmZlcmVuY2UtLTsNCiAgICAgICAgICAgICAgICAkZGF0ZWRpZmYgPSAkcXVhcnRlcnNfZGlmZmVyZW5jZTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSAibSI6IC8vIE51bWJlciBvZiBmdWxsIG1vbnRocw0KICAgICAgICAgICAgICAgICRtb250aHNfZGlmZmVyZW5jZSA9IGZsb29yKCRkaWZmZXJlbmNlIC8gMjY3ODQwMCk7DQogICAgICAgICAgICAgICAgd2hpbGUgKG1rdGltZShkYXRlKCJIIiwgJGRhdGVmcm9tKSwgZGF0ZSgiaSIsICRkYXRlZnJvbSksIGRhdGUoInMiLCAkZGF0ZWZyb20pLCBkYXRlKCJuIiwgJGRhdGVmcm9tKSArICgkbW9udGhzX2RpZmZlcmVuY2UpLCBkYXRlKCJqIiwgJGRhdGV0byksIGRhdGUoIlkiLCAkZGF0ZWZyb20pKSA8ICRkYXRldG8pIHsNCiAgICAgICAgICAgICAgICAgICAgJG1vbnRoc19kaWZmZXJlbmNlKys7DQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAkbW9udGhzX2RpZmZlcmVuY2UtLTsNCiAgICAgICAgICAgICAgICAkZGF0ZWRpZmYgPSAkbW9udGhzX2RpZmZlcmVuY2U7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgJ3knOiAvLyBEaWZmZXJlbmNlIGJldHdlZW4gZGF5IG51bWJlcnMNCiAgICAgICAgICAgICAgICAkZGF0ZWRpZmYgPSBkYXRlKCJ6IiwgJGRhdGV0bykgLSBkYXRlKCJ6IiwgJGRhdGVmcm9tKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSAiZCI6IC8vIE51bWJlciBvZiBmdWxsIGRheXMNCiAgICAgICAgICAgICAgICAkZGF0ZWRpZmYgPSBmbG9vcigkZGlmZmVyZW5jZSAvIDg2NDAwKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSAidyI6IC8vIE51bWJlciBvZiBmdWxsIHdlZWtkYXlzDQogICAgICAgICAgICAgICAgJGRheXNfZGlmZmVyZW5jZSA9IGZsb29yKCRkaWZmZXJlbmNlIC8gODY0MDApOw0KICAgICAgICAgICAgICAgICR3ZWVrc19kaWZmZXJlbmNlID0gZmxvb3IoJGRheXNfZGlmZmVyZW5jZSAvIDcpOyAvLyBDb21wbGV0ZSB3ZWVrcw0KICAgICAgICAgICAgICAgICRmaXJzdF9kYXkgPSBkYXRlKCJ3IiwgJGRhdGVmcm9tKTsNCiAgICAgICAgICAgICAgICAkZGF5c19yZW1haW5kZXIgPSBmbG9vcigkZGF5c19kaWZmZXJlbmNlICUgNyk7DQogICAgICAgICAgICAgICAgJG9kZF9kYXlzID0gJGZpcnN0X2RheSArICRkYXlzX3JlbWFpbmRlcjsgLy8gRG8gd2UgaGF2ZSBhIFNhdHVyZGF5IG9yIFN1bmRheSBpbiB0aGUgcmVtYWluZGVyPw0KICAgICAgICAgICAgICAgIGlmICgkb2RkX2RheXMgPiA3KSB7IC8vIFN1bmRheQ0KICAgICAgICAgICAgICAgICAgICAkZGF5c19yZW1haW5kZXItLTsNCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgIGlmICgkb2RkX2RheXMgPiA2KSB7IC8vIFNhdHVyZGF5DQogICAgICAgICAgICAgICAgICAgICRkYXlzX3JlbWFpbmRlci0tOw0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgJGRhdGVkaWZmID0gKCR3ZWVrc19kaWZmZXJlbmNlICogNSkgKyAkZGF5c19yZW1haW5kZXI7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgInd3IjogLy8gTnVtYmVyIG9mIGZ1bGwgd2Vla3MNCiAgICAgICAgICAgICAgICAkZGF0ZWRpZmYgPSBmbG9vcigkZGlmZmVyZW5jZSAvIDYwNDgwMCk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgImgiOiAvLyBOdW1iZXIgb2YgZnVsbCBob3Vycw0KICAgICAgICAgICAgICAgICRkYXRlZGlmZiA9IGZsb29yKCRkaWZmZXJlbmNlIC8gMzYwMCk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgIm4iOiAvLyBOdW1iZXIgb2YgZnVsbCBtaW51dGVzDQogICAgICAgICAgICAgICAgJGRhdGVkaWZmID0gZmxvb3IoJGRpZmZlcmVuY2UgLyA2MCk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6IC8vIE51bWJlciBvZiBmdWxsIHNlY29uZHMgKGRlZmF1bHQpDQogICAgICAgICAgICAgICAgJGRhdGVkaWZmID0gJGRpZmZlcmVuY2U7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0gDQoNCiAgICAgICAgcmV0dXJuICRkYXRlZGlmZjsNCiAgICB9IA0KfSANCg0KaWYgKCFpc3NldCgkTWFrZU1hcERlZmluZWQpKSB7DQogICAgZnVuY3Rpb24gTWFrZU1hcCgkZnVuY0V0b21pdGUsICRsaXN0UGFyZW50KQ0KICAgIHsNCiAgICAgICAgZ2xvYmFsICRzZXJ2ZXJfb2Zmc2V0X3RpbWU7DQogICAgICAgIGdsb2JhbCAkR01UX3ZhbHVlOw0KDQogICAgICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQogICAgICAgIC8vIENvbmZpZ3VyYXRpb24gU2V0dGluZ3MgDQogICAgICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCiAgICAgICAgLy8gJHdlYnNpdGVVUkwgW3N0cmluZ10NCiAgICAgICAgLy8gUHJvdmlkZSB0aGUgZnVsbCBiYXNlIHBhdGggVVJMIG9mIHlvdXIgd2ViIHNpdGUsDQogICAgICAgIC8vIG9yIGxldCBFdG9taXRlIGdldCBpdCAodjAuNi4xIEZpbmFsKS4NCiAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGh0dHA6Ly93d3cueW91cmRvbWFpbi5jb20vDQogICAgICAgIC8vIE5PVEU6IFlvdSBtdXN0IHB1dCBhIC8gb24gdGhlIGVuZCBvZiB0aGUgd2ViIHNpdGUgVVJMLg0KICAgICAgICAvLw0KICAgICAgICAvLyBPcmlnaW5hbCBoYXJkIGNvZGVkIHdheSB0byBzcGVjaWZ5ICR3ZWJzaXRlVVJMDQogICAgICAgIC8vICR3ZWJzaXRldXJsID0gJ2h0dHA6Ly93d3cuPHlvdXIgZG9tYWluIG5hbWU+Lyc7IA0KICAgICAgICAvLw0KICAgICAgICAvLyBFYXJseSBFdG9taXRlIHdheSB0byBnZXQgJHdlYnNpdGVVUkwgYXV0b21hdGljYWxseQ0KICAgICAgICAvLyAkd2Vic2l0ZXVybCA9ICRldG9taXRlLT5jb25maWdbJ3d3d19iYXNlX3BhdGgnXTsNCiAgICAgICAgLy8NCiAgICAgICAgLy8gRXRvbWl0ZSAwLjYuMSBGaW5hbCB3YXkgdG8gZ2V0ICR3ZWJzaXRlVVJMIGF1dG9tYXRpY2FsbHkNCiAgICAgICAgZ2xvYmFsICRFVE9NSVRFX1BBR0VfQkFTRTsNCiAgICAgICAgJHdlYnNpdGV1cmwgPSAkRVRPTUlURV9QQUdFX0JBU0VbJ3d3dyddOw0KDQogICAgICAgIC8vICRzaG93bGFzdG1vZGRhdGUgW3RydWUgfCBmYWxzZV0NCiAgICAgICAgLy8gWW91IGNhbiBjaG9vc2UgdG8gZGlzYWJsZSBwcm92aWRpbmcgdGhlIGxhc3QgbW9kaWZpY2F0aW9uDQogICAgICAgIC8vIGRhdGUsIG9yIGdldCBpdCBmcm9tIHRoZSBkb2N1bWVudHMuDQogICAgICAgIC8vIHRydWUgIC0gR2V0IHRpbWUgZnJvbSBkb2N1bWVudHMNCiAgICAgICAgLy8gZmFsc2UgLSBEaXNhYmxlZCwgZG8gbm90IHdyaXRlIGl0DQogICAgICAgICRzaG93bGFzdG1vZGRhdGUgPSB0cnVlOyANCg0KICAgICAgICAvLyAkc2hvd2xvbmd0aW1lZm9ybWF0IFsgdHJ1ZSB8IGZhbHNlIF0NCiAgICAgICAgLy8gWW91IGNhbiBjaG9vc2UgdG8gcHJvdmlkZSB0aGUgdGltZSBmb3JtYXQgYXM6DQogICAgICAgIC8vIHRydWUgIC0gTG9uZyB0aW1lIGZvcm1hdCAod2l0aCB0aW1lLCBlLmcuIDIwMDYtMDktMjlUMTM6NDM6NTErMTE6MDApDQogICAgICAgIC8vIGZhbHNlIC0gU2hvcnQgdGltZSBmb3JtYXQgKGRhdGUgb25seSwgZS5nLiAyMDA2LTExLTE3KQ0KICAgICAgICAkc2hvd2xvbmd0aW1lZm9ybWF0ID0gdHJ1ZTsgDQoNCiAgICAgICAgLy8gJHNob3dwcmlvcml0eSBbIHRydWUgfCBmYWxzZSBdDQogICAgICAgIC8vIFlvdSBjYW4gY2hvb3NlIHRvIGRpc2FibGUgcHJpdmlkaW5nIHRoZSBwcmlvcml0eQ0KICAgICAgICAvLyBvZiBhIGRvY3VtZW50IHJlbGF0aXZlIHRvIHRoZSB3aG9sZSBzZXQgb2YgZG9jdW1lbnRzLA0KICAgICAgICAvLyBvciBjYWxjdWxhdGUgaXQgYmFzZWQgb24gdGhlIGRhdGUgZGlmZmVyZW5jZS4NCiAgICAgICAgLy8gdHJ1ZSAgLSBQcm92aWRlIHRoZSBwcmlvcml0eQ0KICAgICAgICAvLyBmYWxzZSAtIERpc2FibGVkLCBkbyBub3Qgd3JpdGUgaXQNCiAgICAgICAgJHNob3dwcmlvcml0eSA9IHRydWU7IA0KDQogICAgICAgIC8vICRzaG93Y2hhbmdlZnJlcSBbdHJ1ZSB8IGZhbHNlXQ0KICAgICAgICAvLyBZb3UgY2FuIGNob29zZSB0byBkaXNhYmxlIHByaXZpZGluZyB0aGUgdXBkYXRlDQogICAgICAgIC8vIChjaGFuZ2UpIGZyZXF1ZW5jeSBvZiBhIGRvY3VtZW50IHJlbGF0aXZlIHRvIHRoZQ0KICAgICAgICAvLyB3aG9sZSBzZXQgb2YgZG9jdW1lbnRzLCBvciBjYWxjdWxhdGUgaXQgYmFzZWQgb24NCiAgICAgICAgLy8gdGhlIGRhdGUgZGlmZmVyZW5jZS4NCiAgICAgICAgLy8gdHJ1ZSAgLSBQcm92aWRlIHRoZSBjaGFuZ2UgZnJlcXVlbmN5DQogICAgICAgIC8vIGZhbHNlIC0gRGlzYWJsZWQsIGRvIG5vdCB3cml0ZSBpdA0KICAgICAgICAkc2hvd2NoYW5nZWZyZXEgPSB0cnVlOw0KDQogICAgICAgIC8vICRmb3JjZWNoYW5nZWZyZXEgW3N0cmluZ10NCiAgICAgICAgLy8gWW91IGNhbiBjaG9vc2UgdG8gZm9yY2UgdGhlIGNoYW5nZSBmcmVxdWVuY3kgZm9yIGFsbCANCiAgICAgICAgLy8gZG9jdW1lbnRzIHRvIG9uZSBvZiB0aGUgdmFsaWQgdmFsdWVzLg0KICAgICAgICAvLyBCeSBzcGVjaWZ5aW5nIG5vdGhpbmcsIHRoZSBzbmlwcGV0IHdpbGwgY2FsY3VsYXRlIHRoZSANCiAgICAgICAgLy8gY2hhbmdlIGZyZXF1ZW5jeSBvZiBhIGRvY3VtZW50IHJlbGF0aXZlIHRvIHRoZQ0KICAgICAgICAvLyB3aG9sZSBzZXQgb2YgZG9jdW1lbnRzLCBvciBjYWxjdWxhdGUgaXQgYmFzZWQgb24NCiAgICAgICAgLy8gdGhlIGRhdGUgZGlmZmVyZW5jZS4NCiAgICAgICAgLy8gImFsd2F5cyIsICJob3VybHkiLCAiZGFpbHkiLCAid2Vla2x5IiwgIm1vbnRobHkiLA0KICAgICAgICAvLyAieWVhcmx5IiwgIm5ldmVyIiAtIEZvcmNlIHRoaXMgdmFsdWUgZm9yIGV2ZXJ5IGRvY3VtZW50DQogICAgICAgIC8vICIiIC0gQ2FsY3VsYXRlIGNoYW5nZSBmcmVxdWVuY3kgZnJvbSBsYXN0IG1vZCBkYXRlDQogICAgICAgICRmb3JjZWNoYW5nZWZyZXEgPSAiIjsNCg0KICAgICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KICAgICAgICAvLyBFTkQgQ09ORklHIFNFVFRJTkdTDQogICAgICAgIC8vIFRIRSBSRVNUIFNIT1VMRCBUQUtFIENBUkUgT0YgSVRTRUxGDQogICAgICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCiAgICAgICAgJGNoaWxkcmVuID0gJGZ1bmNFdG9taXRlLT5nZXRBY3RpdmVDaGlsZHJlbigkbGlzdFBhcmVudCwgIm1lbnVpbmRleCIsICJBU0MiLCAiaWQsIGVkaXRlZG9uLCBzZWFyY2hhYmxlIik7DQogICAgICAgIGZvcmVhY2goJGNoaWxkcmVuIGFzICRjaGlsZCkgew0KICAgICAgICAgICAgJGlkID0gJGNoaWxkWydpZCddOw0KICAgICAgICAgICAgJHVybCA9ICR3ZWJzaXRldXJsIC4gIlt+IiAuICRpZCAuICJ+XSI7DQoNCiAgICAgICAgICAgICRkYXRlID0gJGNoaWxkWydlZGl0ZWRvbiddOw0KICAgICAgICAgICAgJGxhc3Rtb2RkYXRlID0gJGRhdGU7DQogICAgICAgICAgICAkZGF0ZSA9IGRhdGUoIlktbS1kIiwgJGRhdGUpOw0KDQogICAgICAgICAgICAkc2VhcmNoYWJsZSA9ICRjaGlsZFsnc2VhcmNoYWJsZSddOw0KICAgICAgICAgICAgaWYgKCRzZWFyY2hhYmxlKSB7DQogICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBkYXRlIGRpZmZlcmVuY2UNCiAgICAgICAgICAgICAgICAkZGF0ZWRpZmYgPSBkYXRlZGlmZigiZCIsICRkYXRlLCBkYXRlKCJZLW0tZCIpKTsNCiAgICAgICAgICAgICAgICBpZiAoJGRhdGVkaWZmIDw9IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgJHByaW9yaXR5ID0gIjEuMCI7DQogICAgICAgICAgICAgICAgICAgICR1cGRhdGUgPSAiZGFpbHkiOw0KICAgICAgICAgICAgICAgIH0gZWxzZWlmICgoJGRhdGVkaWZmID4gMSkgJiYgKCRkYXRlZGlmZiA8PSA3KSkgew0KICAgICAgICAgICAgICAgICAgICAkcHJpb3JpdHkgPSAiMC43NSI7DQogICAgICAgICAgICAgICAgICAgICR1cGRhdGUgPSAid2Vla2x5IjsNCiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoKCRkYXRlZGlmZiA+IDcpICYmICgkZGF0ZWRpZmYgPD0gMzApKSB7DQogICAgICAgICAgICAgICAgICAgICRwcmlvcml0eSA9ICIwLjUwIjsNCiAgICAgICAgICAgICAgICAgICAgJHVwZGF0ZSA9ICJ3ZWVrbHkiOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICRwcmlvcml0eSA9ICIwLjI1IjsNCiAgICAgICAgICAgICAgICAgICAgJHVwZGF0ZSA9ICJtb250aGx5IjsNCiAgICAgICAgICAgICAgICB9IA0KDQogICAgICAgICAgICAgICAgJG91dHB1dCAuPSAiPHVybD5cbiI7DQoNCiAgICAgICAgICAgICAgICAkb3V0cHV0IC49ICI8bG9jPiR1cmw8L2xvYz5cbiI7DQoNCiAgICAgICAgICAgICAgICBpZiAoJHNob3dsYXN0bW9kZGF0ZSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoISRzaG93bG9uZ3RpbWVmb3JtYXQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRsYXN0bW9kZGF0ZSA9IGRhdGUoIlktbS1kIiwgJGxhc3Rtb2RkYXRlICsgJHNlcnZlcl9vZmZzZXRfdGltZSk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkbGFzdG1vZGRhdGUgPSBkYXRlKCJZLW0tZFxUSDppOnMiLCAkbGFzdG1vZGRhdGUgKyAkc2VydmVyX29mZnNldF90aW1lKSAuICRHTVRfdmFsdWU7DQogICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgICAgICRvdXRwdXQgLj0gIjxsYXN0bW9kPiRsYXN0bW9kZGF0ZTwvbGFzdG1vZD5cbiI7DQogICAgICAgICAgICAgICAgfSANCg0KICAgICAgICAgICAgICAgIGlmICgkc2hvd2NoYW5nZWZyZXEpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCRmb3JjZWNoYW5nZWZyZXEgPT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRvdXRwdXQgLj0gIjxjaGFuZ2VmcmVxPiR1cGRhdGU8L2NoYW5nZWZyZXE+XG4iOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgJG91dHB1dCAuPSAiPGNoYW5nZWZyZXE+JGZvcmNlY2hhbmdlZnJlcTwvY2hhbmdlZnJlcT5cbiI7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9IA0KDQogICAgICAgICAgICAgICAgaWYgKCRzaG93cHJpb3JpdHkpIHsNCiAgICAgICAgICAgICAgICAgICAgJG91dHB1dCAuPSAiPHByaW9yaXR5PiRwcmlvcml0eTwvcHJpb3JpdHk+XG4iOw0KICAgICAgICAgICAgICAgIH0gDQoNCiAgICAgICAgICAgICAgICAkb3V0cHV0IC49ICI8L3VybD5cbiI7DQogICAgICAgICAgICB9IA0KDQogICAgICAgICAgICBpZiAoJGZ1bmNFdG9taXRlLT5nZXRBY3RpdmVDaGlsZHJlbigkY2hpbGRbJ2lkJ10pKSB7DQogICAgICAgICAgICAgICAgJG91dHB1dCAuPSBNYWtlTWFwKCRmdW5jRXRvbWl0ZSwgJGNoaWxkWydpZCddKTsNCiAgICAgICAgICAgIH0gDQogICAgICAgIH0gDQogICAgICAgIHJldHVybiAkb3V0cHV0Ow0KICAgIH0gDQogICAgJE1ha2VNYXBEZWZpbmVkID0gdHJ1ZTsNCn0gDQoNCiRvdXQgPSAiPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+XG4iOw0KaWYgKCR2YWxpZGF0ZXNjaGVtYSkgew0KICAgICRvdXQgLj0gIjx1cmxzZXQgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIlxuIjsNCiAgICAkb3V0IC49ICIgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249XCJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXBzLzAuOVxuIjsNCiAgICAkb3V0IC49ICIgICAgICAgICBodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXBzL3NpdGVtYXAueHNkXCJcbiI7DQogICAgJG91dCAuPSAiICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45XCI+XG4iOw0KfSBlbHNlIHsNCiAgICAvLyAkb3V0IC49ICI8dXJsc2V0IHhtbG5zPVwiaHR0cDovL3d3dy5nb29nbGUuY29tL3NjaGVtYXMvc2l0ZW1hcC8wLjg0XCI+XG4iOw0KICAgICRvdXQgLj0gIjx1cmxzZXQgeG1sbnM9XCJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45XCI+XG4iOw0KfQ0KDQovLyBQcm9kdWNlIHRoZSBzaXRlbWFwIGZvciB0aGUgbWFpbiB3ZWIgc2l0ZQ0KJG91dCAuPSBNYWtlTWFwKCRldG9taXRlLCAwKTsNCg0KLy8gVG8gYWxzbyBsaXN0IGRvY3VtZW50cyBpbiB1bnB1Ymxpc2hlZCByZXBvc2l0b3J5IGZvbGRlcnMsDQovLyBwbGFjZSBhbiBhZGRpdGlvbmFsIGNhbGwgdG8gTWFrZU1hcCBoZXJlIGZvciBlYWNoIG9uZSwgZS5nLiANCi8vICRvdXQgLj0gTWFrZU1hcCgkZXRvbWl0ZSwgOCk7DQovLyB3aGVyZSA4IGlzIHRoZSBkb2N1bWVudCBpZCBvZiB0aGUgdW5wdWJsaXNoZWQgcmVwb3NpdG9yeSBmb2xkZXIuDQoNCiRvdXQgLj0gIjwvdXJsc2V0PiI7DQoNCnJldHVybiAkb3V0Ow==';
$this->snippetCache['ListGlobal']='Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyBTbmlwcGV0OiBMaXN0R2xvYmFsDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIFZlcnNpb24gMS4wDQovLyBEYXRlOiAyMDA4LTAzLTI4DQovLyBCeSBSYWxwaCBBIERhaGxncmVuDQovLyBBZGRlZCBMR2xvYl9pc2ZvbGRlciBpbmRpY2F0b3IgY2xhc3Mgc3VwcG9ydA0KLy8NCi8vIFZlcnNpb246IDAuNmUNCi8vIERhdGU6IDIwMDUuMDcuMDENCi8vIGphcmVkY0Bob25leWRld2Rlc2lnbi5jb20NCi8vDQovLyBTbmlwcGV0IGZvciBsaXN0aW5nIGdsb2JhbCBsaXN0IG9mIGxpbmtzIG9yIHNlY3Rpb25zDQovLyAoUHVibGlzaGVkIHBhZ2VzIHdobydzIHBhcmVudCBpcyByb290KS4gSGlnaGxpZ2h0IGFiaWxpdHkNCi8vIGZvciBjdXJyZW50IHNlY3Rpb24uDQoNCi8vICRub2RlIFsgaW50IF0NCi8vIElkIG9mIHdoYXQgeW91IHdhbnQgdG8gY29uc2lkZXIgdGhlICJyb290IiBvZiB0aGUgc2l0ZSBvciBzZWN0aW9uLg0KLy8gRm9yIGluc3RhbmNlLCBpZiB5b3UgYnJhbmNoIG9mZiBzZXZlcmFsIHNlY3Rpb25zIGZyb20gdGhlIDAgcm9vdCBsZXZlbA0KLy8gYmFzZWQgb24gbGFuZ3VhZ2VzLCB5b3UgbWlnaHQgd2FudCB0byBzZXQgdGhlIGxhbmd1YWdlIGhvbWUgcGFnZSBhcw0KLy8gdGhlIHJvb3QuIE90aGVyd2lzZSBpdCB3aWxsIGRlZmF1bHQgdG8gMCB3aGljaCBpcyB0aGUgc2l0ZSByb290LiBJdA0KLy8gd2lsbCBhbHNvIGRlZmF1bHQgdG8gMCB3aGVuIDAgaXMgdGhlIGxpdGVyYWwgcm9vdC4gU2V0dGFibGUgaW4gc25pcHBldA0KLy8gY2FsbCB3aXRoICRMR2xvYl9ub2RlOg0KLy8gW1tMaXN0R2xvYmFsP0xHbG9iX25vZGU9N11dDQogICAkbm9kZSA9IDA7DQoNCi8vIFNUWUxFUw0KLy8gLkxHbG9iX2xpc3QgICAgIHVsIGVsZW1lbnQgb2YgbGlzdA0KLy8gLkxHbG9iX2FjdGl2ZSAgIGxpIG9mIHNlY3Rpb24geW91IGFyZSBpbg0KLy8gLkxHbG9iX2lzZm9sZGVyIGRpc3BsYXlzIGFuIGluZGljYXRvciB0aGF0IHRoaXMgaXRlbSBpcyBhIGZvbGRlcg0KDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gRU5EIENPTkZJRw0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KLy8gT3ZlcnJpZGUgZGVmYXVsdCBub2RlIHdpdGggc25pcHBldCBjYWxsIGlmIG5lY2Vzc2FyeQ0KJG5vZGUgPSAoaXNzZXQoJExHbG9iX25vZGUpKSA/ICRMR2xvYl9ub2RlIDogJG5vZGU7DQoNCi8vIERldGVybWluZSBjb3JyZWN0IG5vZGUgdG8gY29uc2lkZXIgcGFyZW50DQokdGVtcFBhZ2VJbmZvID0gJGV0b21pdGUtPmdldFBhZ2VJbmZvKCRldG9taXRlLT5kb2N1bWVudElkZW50aWZpZXIsMCwncGFyZW50Jyk7DQokdGhpc1BhcmVudCA9ICR0ZW1wUGFnZUluZm9bJ3BhcmVudCddOw0KDQovLyBDaGFuZ2Ugcm9vdCBub2RlIGlmIG5lY2Vzc2FyeQ0KaWYgKCRub2RlICYmICEkdGhpc1BhcmVudCl7DQogICRub2RlID0gMDsNCn0NCg0KJGdsb2JhbEtpZHMgPSAkZXRvbWl0ZS0+Z2V0QWN0aXZlQ2hpbGRyZW4NCigNCiAgJGlkPSRub2RlLA0KICAkc29ydD0nbWVudWluZGV4JywNCiAgJGRpcj0nJywNCiAgJGZpZWxkcz0naWQsIHBhZ2V0aXRsZSwgbG9uZ3RpdGxlLCBkZXNjcmlwdGlvbiwgYWxpYXMsIHBhcmVudCwgaXNmb2xkZXIsIHNob3dpbm1lbnUnLA0KICAkbGltaXQ9IiIsDQogICRzaG93aGlkZGVuPWZhbHNlDQopOw0KJHNlY3Rpb25JZCA9ICRldG9taXRlLT5kb2N1bWVudElkZW50aWZpZXI7DQp3aGlsZSAoICgkcGFnZUluZm8gPSAkZXRvbWl0ZS0+Z2V0UGFnZUluZm8oJHNlY3Rpb25JZCwwLCdwYXJlbnQnKSkgJiYgKCRwYWdlSW5mb1sncGFyZW50J10gIT0gJG5vZGUgKSApIHsNCiAgJHNlY3Rpb25JZCA9ICRwYWdlSW5mb1sncGFyZW50J107DQp9DQokb3V0cHV0ID0gJzx1bCBjbGFzcz0iTEdsb2JfbGlzdCI+JzsNCiRnbG9iYWxDb3VudCA9IDA7DQpmb3JlYWNoICgkZ2xvYmFsS2lkcyBhcyAka2lkKQ0Kew0KICAkb3V0cHV0IC49ICc8bGknOw0KICAvLyBlbXB0eSB0aGUgJGNsYXNzIHZhcmlhYmxlDQogICRjbGFzcyA9ICIiOw0KICAvLyBTVEFSVDpjb25kaXRpb25hbCBjbGFzcyBhc3NpZ25tZW50cw0KICAvLyBjb25kaXRpb25hbGx5IGFzc2lnbiAkYWN0aXZlDQogICRhY3RpdmUgPSAoJGtpZFsnaWQnXSA9PSAkc2VjdGlvbklkKSA/ICJMR2xvYl9hY3RpdmUgIiA6ICIiOw0KICAvLyBjb25kaXRpb25hbGx5IGFzc2lnbiAkaXNmb2xkZXINCiAgJGlzZm9sZGVyID0gKCRraWRbJ2lzZm9sZGVyJ10gPT0gMSkgPyAiTEdsb2JfaXNmb2xkZXIgIiA6ICIiOw0KICAvLyBjb21iaW5lICRhY3RpdmUgYW5kICRpc2ZvbGRlciBhbmQgcmVtb3ZlIGFueSBsZWFkaW5nIG9yIHRyYWlsaW5nIHNwYWNlcw0KICAkY2xhc3MgPSB0cmltKCRhY3RpdmUuJGlzZm9sZGVyKTsNCiAgLy8gaWYgYm90aCAkaXNmb2xkZXIgYW5kICRhY3RpdmUgYXJlIHNldCwgYXNzaWduIGEgY29tYmluZWQgY2xhc3MNCiAgaWYoJGlzZm9sZGVyICE9ICIiICYmICRhY3RpdmUgIT0gIiIpICRjbGFzcyA9ICJMR2xvYl9pc2ZvbGRlcl9hY3RpdmUiOw0KICAvLyBpZiB0aGVyZSBpcyBhIGNsYXNzIGFzc2lnbm1lbnQsIGNyZWF0ZSB0aGUgY2xhc3MsIG90aGVyd2lzZSBhc3NpZ24gbnVsbA0KICAkY2xhc3MgPSAoJGNsYXNzICE9ICIiKSA/ICIgY2xhc3M9XCIkY2xhc3NcIiIgOiBudWxsOw0KICAvLyBFTkQ6Y29uZGl0aW9uYWwgY2xhc3MgYXNzaWdubWVudHMNCiAgJG91dHB1dCAuPSAkY2xhc3MuJz48YSBocmVmPSJbficuJGtpZFsnaWQnXS4nfl0iICc7DQogICRvdXRwdXQgLj0gJ3RpdGxlPSInLiRraWRbJ2xvbmd0aXRsZSddLiciPic7DQogICRvdXRwdXQgLj0gJGtpZFsncGFnZXRpdGxlJ10uJzwvYT48L2xpPic7DQogICRnbG9iYWxDb3VudCsrOw0KfQ0KJG91dHB1dCAuPSAnPC91bD4nOw0KcmV0dXJuICRvdXRwdXQ7';
$this->snippetCache['RelatedInfo']='Ly8gU25pcHBldCBuYW1lOiBSZWxhdGVkSW5mbw0KLy8gU25pcHBldCBkZXNjcmlwdGlvbjogT3V0cHV0cyBhIHJlbGF0ZWQgY2h1bmsgaW50byB0aGUgZG9jdW1lbnQNCi8vIFJldmlzaW9uOiAxLjAgc2hpcHMgd2l0aCBFdG9taXRlIDAuNi4xLUZpbmFsDQovLyBBdXRob3I6IExsb3lkIEJvcnJldHQgLSAyMDA2LTA0LTA5DQoNCi8vIERlc2NyaXB0aW9uOg0KLy8gICBPdXRwdXRzIGEgY2h1bmsgaW50byB0aGUgZG9jdW1lbnQgYmFzZWQgb24gdGhlIA0KLy8gICBkb2N1bWVudCdzIGFsaWFzL2lkLCBhbmQgb3B0aW9uYWxseSwgYSBwcmVmaXggDQovLyAgIHBhc3NlZCB0byB0aGUgY2h1bmsuDQoNCi8vIFVzYWdlOg0KLy8gICBJbnNlcnQgW1tSZWxhdGVkSW5mb11dIG9yIFtbUmVsYXRlZEluZm8/cHJlZml4PTxZb3VyUHJlZml4Pl1dDQovLyAgIGluIHlvdXIgdGVtcGxhdGUgd2hlcmUgeW91IHdhbnQgdGhlIHJlcXVpcmVkIGRvY3VtZW50IA0KLy8gICBzcGVjaWZpYyBjb250ZW50IHRvIGFwcGVhci4NCi8vICAgZS5nLiBbW1JlbGF0ZWRJbmZvXV0sIFtbUmVsYXRlZEluZm8/cHJlZml4PVJpZ2h0Q29sdW1uXV0sDQovLyAgIFtbUmVsYXRlZEluZm8/cHJlZml4PU1pZGRsZUNvbHVtbl1dIGV0Yy4NCi8vICAgQ3JlYXRlIGEgY2h1bmsgY2FsbGVkICJSZWxhdGVkSW5mby08dmFsdWU+IiBhbmQvb3IgDQovLyAgICI8WW91clByZWZpeD4tPHZhbHVlPiIgZm9yIGVhY2ggZG9jdW1lbnQgd2hlcmUgeW91IHdhbnQgDQovLyAgIHRvIGRpc3BsYXkgZG9jdW1lbnQgcmVsYXRlZCBjb250ZW50Lg0KDQovLyAgICI8dmFsdWU+IiBpcyB0aGUgZG9jdW1lbnQgYWxpYXMgKGlmIHNwZWNpZmllZCksIG9yIHRoZSANCi8vICAgZG9jdW1lbnQgaWQgbnVtYmVyIGlmIHRoZXJlIGlzIG5vIGFsaWFzIHZhbHVlLg0KLy8gICAiPFlvdXJQcmVmaXg+IiBpcyBhIHByZWZpeCB2YWx1ZSBwYXNzZWQgdG8gdGhlIGNodW5rLg0KDQovLyAgIEZvciBleGFtcGxlOiAiUmVsYXRlZEluZm8taG9tZSIsICJSZWxhdGVkSW5mby0xIiwNCi8vICAgIk1pZGRsZUNvbHVtbi1ob21lIiwgIk1pZGRsZUNvbHVtbi0xIiBldGMuDQoNCi8vICAgVGhlIHNuaXBwZXQgd2lsbCBpbnNlcnQgdGhlIGNvbnRlbnQgb2YgeW91ciAiUmVsYXRlZEluZm8tPHZhbHVlPiIgYW5kL29yDQovLyAgICI8WW91clByZWZpeD4tPHZhbHVlPiIgY2h1bmtzIGludG8gdGhlIGFwcHJvcHJpYXRlIGRvY3VtZW50Lg0KDQovLyAgIElmIHRoZXJlIGlzIG5vIG91dHB1dCBmcm9tICJSZWxhdGVkSW5mby08dmFsdWU+IiBhbmQvb3IgIjxZb3VyUHJlZml4Pi08dmFsdWU+IiwNCi8vICAgdHlwaWNhbGx5IGJlY2F1c2UgdGhlIGNodW5rcyBkb24ndCBleGlzdCwgdGhlIHlvdSBjYW4gcmVxdWVzdCB0aGF0IHRoZSBkZWZhdWx0DQovLyAgICJSZWxhdGVkSW5mbyIgb3IgIjxZb3VyUHJlZml4PiIgY2h1bmtzIGFyZSB1c2VkLCBpZiB0aGV5IGV4aXN0Lg0KDQovLyBQcm9ibGVtIDE6DQovLyAgIFlvdSB3YW50IHRvIGJlIGFibGUgdG8gcHV0IHNvbWUgY29udGVudCBpbnRvIGEgc2VjdGlvbiBvZiANCi8vICAgeW91ciBkb2N1bWVudCB0ZW1wbGF0ZS4gQnV0IHlvdSB3b3VsZCBsaWtlIHRvIGJlIGFibGUgdG8gaGF2ZSANCi8vICAgZGlmZmVyZW50IGNvbnRlbnQgZm9yIGRpZmZlcmVudCBkb2N1bWVudHMuDQovLyAgIFR5cGljYWxseSB0aGlzIG1pZ2h0IGJlIGRvY3VtZW50IHJlbGF0ZWQgY29udGVudCBmb3IgYW5vdGhlciANCi8vICAgY29sdW1uIG9yIHNvbWV0aGluZyBzaW1pbGFyLg0KDQovLyBTb2x1dGlvbiAxOg0KLy8gICBJbnNlcnQgW1tSZWxhdGVkSW5mb11dIGludG8geW91ciB0ZW1wbGF0ZSB3aGVyZSB5b3Ugd2FudCB0aGUgY29udGVudCB0byBhcHBlYXIuDQovLyAgIE5vdyBjcmVhdGUgYSBjaHVuayBjYWxsZWQgIlJlbGF0ZWRJbmZvLTx2YWx1ZT4iIGZvciBlYWNoIGRvY3VtZW50IHdoZXJlIHlvdSB3YW50DQovLyAgIGRvY3VtZW50IHNwZWNpZmljIGNvbnRlbnQgdG8gYXBwZWFyLg0KLy8gICBGb3IgZXhhbXBsZSwgaWYgeW91IGhhdmUgYSBkb2N1bWVudCB3aXRoIGFuIGFsaWFzICJwcm9kdWN0eCIsIA0KLy8gICB0aGUgY2h1bmsgd291bGQgYmUgY2FsbGVkICJSZWxhdGVkSW5mby1wcm9kdWN0eCIuDQovLyAgIElmIHRoZSBkb2N1bWVudCBoYXMgbm8gYWxpYXMsIHRoZW4gaXQncyBpZCB2YWx1ZSBpcyB1c2VkLCANCi8vICAgZm9yIGV4YW1wbGUgIlJlbGF0ZWRJbmZvLTIzIi4NCi8vICAgSW50byB0aGUgIlJlbGF0ZWRJbmZvLTx2YWx1ZT4iIGNodW5rIHlvdSBjYW4gcHV0IHRoZSBjb250ZW50IHlvdSB3YW50LA0KLy8gICBhbmQvb3IgY2FsbHMgdG8gb3RoZXIgY2h1bmtzIGFuZCBzbmlwcGV0cy4NCi8vICAgSWYgeW91IGRvbid0IGhhdmUgZG9jdW1lbnQgc3BlY2lmaWMgY29udGVudCBmb3IgdGhhdCBkb2N1bWVudCwgDQovLyAgIHRoZW4geW91IGNhbiBsZXQgdGhlIGRlZmF1bHQgY29udGVudCBmcm9tIHRoZSAiUmVsYXRlZEluZm8iIGNodW5rIA0KLy8gICBiZSBvdXRwdXQsIGlmIGl0IGV4aXN0cy4NCi8vICAgSWYgdGhlcmUgaXMgbm8gIlJlbGF0ZWRJbmZvLTx2YWx1ZT4iIG9yICJSZWxhdGVkSW5mbyIgY2h1bmtzLCANCi8vICAgdGhlbiBub3RoaW5nIGlzIG91dHB1dC4NCg0KLy8gUHJvYmxlbSAyOg0KLy8gICBPa2F5IHNvIHlvdSBjYW4gdXNlIFtbUmVsYXRlZEluZm9dXSB0byBkbyBkb2N1bWVudCBzcGVjaWZpYyANCi8vICAgY29udGVudCBmb3Igc2F5IHlvdXIgbWlkZGxlIGNvbHVtbi4NCi8vICAgQnV0IG9uIHNvbWUgZG9jdW1lbnRzIHlvdSBtaWdodCBhbHNvIG1pZ2h0IHdhbnQgc29tZSBwYWdlIA0KLy8gICBzcGVjaWZpYyBleHRyYSBjb250ZW50IGluIGFub3RoZXIgcGFydCBvZiB0aGUgZG9jdW1lbnQuIA0KLy8gICBGb3IgZXhhbXBsZSwgdGhlIHJpZ2h0IGNvbHVtbi4NCg0KLy8gU29sdXRpb24gMjoNCi8vICAgSW5zZXJ0IFtbUmVsYXRlZEluZm8/cHJlZml4PTxZb3VyUHJlZml4Pl1dIGludG8geW91ciB0ZW1wbGF0ZSANCi8vICAgd2hlcmUgeW91IHdhbnQgdGhlIGNvbnRlbnQgdG8gYXBwZWFyLg0KLy8gICBOb3cgY3JlYXRlIGEgY2h1bmsgY2FsbGVkICI8WW91clByZWZpeD4tPHZhbHVlPiIgZm9yIGVhY2ggcGFnZSANCi8vICAgd2hlcmUgeW91IHdhbnQgdGhpcyBkb2N1bWVudCBzcGVjaWZpYyBjb250ZW50IHRvIGFwcGVhci4NCi8vICAgRm9yIGV4YW1wbGUsIHlvdSB3YW50IHRvIHB1dCBzb21lIGNvbnRlbnQgaW50byB0aGUgcmlnaHQgDQovLyAgIGNvbHVtbiBvZiB5b3VyIHRlbXBsYXRlLg0KLy8gICBTbyB5b3UgcHV0IFtbUmVsYXRlZEluZm8/cHJlZml4PVJpZ2h0Q29sdW1uXV0gaW50byB5b3VyIHRlbXBsYXRlLg0KLy8gICBBbmQgaWYgeW91IGhhdmUgYSBkb2N1bWVudCB3aXRoIGFuIGFsaWFzICJwcm9kdWN0eCIsIHRoZSBjaHVuayB3b3VsZCBiZQ0KLy8gICBjYWxsZWQgIlJpZ2h0Q29sdW1uLXByb2R1Y3R4Ii4gSWYgdGhlIGRvY3VtZW50IGhhcyBubyBhbGlhcywgDQovLyAgIHRoZW4gaXQncyBpZCB2YWx1ZSBpcyB1c2VkLCBmb3IgZXhhbXBsZSAiUmlnaHRDb2x1bW4tMjMiLg0KLy8gICBJbnRvIHRoZSAiPFlvdXJQcmVmaXg+LTx2YWx1ZT4iIGNodW5rIHlvdSBjYW4gcHV0IHRoZSBjb250ZW50IHlvdSB3YW50LA0KLy8gICBhbmQvb3IgY2FsbHMgdG8gb3RoZXIgY2h1bmtzIGFuZCBzbmlwcGV0cy4NCi8vICAgSWYgeW91IGRvbid0IGhhdmUgZG9jdW1lbnQgc3BlY2lmaWMgY29udGVudCBmb3IgdGhhdCBkb2N1bWVudCwgDQovLyAgIHlvdSBjYW4gbGV0IHRoZSBkZWZhdWx0IGNvbnRlbnQgZnJvbSB0aGUgIjxZb3VyUHJlZml4PiIgY2h1bmsgDQovLyAgIGJlIG91dHB1dCwgaWYgaXQgZXhpc3RzLg0KLy8gICBJZiB0aGVyZSBpcyBubyAiPFlvdXJQcmVmaXg+LTxhbGlhcz4iIG9yICI8WW91clByZWZpeD4iIGNodW5rcywgDQovLyAgIHRoZW4gbm90aGluZyBpcyBvdXRwdXQuDQoNCi8vIEV4cGxhbmF0aW9uOg0KLy8gICBUaGUgcG93ZXIgb2YgdGhpcyBzbmlwcGV0IGlzIHRoYXQgYSBjaHVuayBkb2Vzbid0IGhhdmUgdG8ganVzdCANCi8vICAgY29udGFpbiByYXcgSFRNTCBjb2RlLg0KLy8gICBUaGUgY2h1bmsgY2FuIGFsc28gaGF2ZSBjYWxscyB0byBvdGhlciBjaHVua3MsIGFuZCBldmVuIGNhbGxzIHRvIHNuaXBwZXRzLg0KLy8gICBUaHVzIGVhY2ggZG9jdW1lbnQgc3BlY2lmaWMgY2h1bmsgeW91IGNyZWF0ZSBjYW4gYmUgZXh0cmVtZWx5IA0KLy8gICBmbGV4aWJsZSBpbiB3aGF0IGdldHMgIHB1dCBpbnRvIHlvdXIgZG9jdW1lbnQsIHdpdGggeW91IGhhdmluZyANCi8vICAgdG8gZHVwbGljYXRlIHJhdyBIVE1MIGNvZGUgaGVyZSwgdGhlcmUgYW5kIGV2ZXJ5d2hlcmUuDQoNCi8vICAgKFNvIG11Y2ggdG8gZXhwbGFpbiBzdWNoIGEgc2ltcGxlIHNuaXBwZXQhKQ0KDQoNCi8vIENvbmZpZ3VyYXRpb24gU2V0dGluZw0KDQovLyAkc2hvd0RlZmF1bHRDcnVtYiBbdHJ1ZSB8IGZhbHNlXQ0KLy8gSWYgdGhlcmUgaXMgbm8gb3V0cHV0IGZyb20gY2FsbGluZyB0aGUgY3J1bWIgZm9yIHRoZSBzcGVjaWZpYyBkb2N1bWVudCwgDQovLyB3aGljaCB0eXBpY2FsbHkgb2NjdXJzIGlmIHlvdSBoYXZlbid0IGNyZWF0ZWQgdGhlIGNydW1iLCANCi8vIGluc3RlYWQgb2YgZ2V0dGluZyBub3RoaW5nIHlvdSBjYW4gYXNrIGZvciBhIGRlZmF1bHQgY3J1bWIgDQovLyB0byBiZSB1c2VkIGJ5IHNldHRpbmcgdGhpcyB2YWx1ZSB0byB0cnVlLiANCi8vIE9mIGNvdXJzZSwgaWYgeW91IGRvbid0IHNldCB1cCBhIGRlZmF1bHQgY3J1bWIsIHlvdSBzdGlsbCBnZXQgbm90aGluZy4gDQovLyBJZiB5b3UgZG9uJ3Qgd2FudCB0byBoYXZlIHRoaXMgZmVhdHVyZSBlbmFibGVkIGp1c3Qgc2V0IHRoaXMgdmFsdWUgdG8gZmFsc2UuDQokc2hvd0RlZmF1bHRDcnVtYiA9IHRydWU7DQoNCiRvdXRwdXQgPSAiIjsNCg0KaWYgKCFpc3NldCgkcHJlZml4KSkgew0KICRwcmVmaXggPSAiUmVsYXRlZEluZm8iOw0KfSBlbHNlIHsNCiAgaWYgKCRwcmVmaXggPT0gIiIpIHsNCiAgICAkcHJlZml4ID0gIlJlbGF0ZWRJbmZvIjsNCiAgfQ0KfQ0KDQokYWxpYXMgPSAkZXRvbWl0ZS0+ZG9jdW1lbnRPYmplY3RbJ2FsaWFzJ107DQppZiAoJGFsaWFzID09ICIiKSB7DQogICRhbGlhcyA9ICRldG9taXRlLT5kb2N1bWVudElkZW50aWZpZXI7DQp9DQoNCiRvdXRwdXQgLj0gJGV0b21pdGUtPnB1dENodW5rKCRwcmVmaXguJy0nLiRhbGlhcyk7DQppZiAoJG91dHB1dCA9PSAiIiAmJiAkc2hvd0RlZmF1bHRDcnVtYikgew0KICAkb3V0cHV0IC49ICRldG9taXRlLT5wdXRDaHVuaygkcHJlZml4KTsNCn0NCg0KcmV0dXJuICRvdXRwdXQ7';
$this->snippetCache['ListChildOrSibs']='';
$this->snippetCache['getSidebar']='';
$this->snippetCache['MetaTagsExtra']='';
$this->snippetCache['DisplayCode']='Ly8gU25pcHBldDogRGlzcGxheUNvZGUNCi8vIFB1cnBvc2U6IFRleHQgZGlzcGxheSBvZiBDaHVuaywgU25pcHBldCwgb3IgVGVtcGxhdGUgY29kZQ0KLy8gQ3JlYXRlZCBCeTogUmFscGggQS4gRGFobGdyZW4NCi8vIExhc3QgTW9kaWZpZWQ6IDIwMDgtMDQtMTcNCi8vIFVzYWdlOiBbW0Rpc3BsYXlDb2RlP3R5cGU9Y2h1bmt8ZmlsZXxzbmlwcGV0fHRlbXBsYXRlJm5hbWU9TmFtZV1dDQovLyBOb3RlOiBSZW1lbWJlciB0aGF0IHRoaXMgc25pcHBldCB1c2VzIHJlc291cmNlIG5hbWVzIGluc3RlYWQgb2YgaWQncyBzbyBuYW1lIGNoYW5nZXMgd2lsbCBlZmZlY3QgZXhpc3Rpbmcgc25pcHBldCBjYWxscw0KLy8gQWxzbzogRmlsZXMgdXNlIGFic29sdXRlIHBhdGhzIHNvIHVzZSAuL3BhdGgvZnJvbS9FdG9taXRlL3Jvb3QNCg0KLy8gU25pcHBldCBtZXNzYWdlcyAodGhlIG1lc3NhZ2VzIGJlbG93IHdlcmUgdXNlZCBmb3IgZGV2ZWxvcG1lbnQgcHVycG9zZXMpDQokdXNhZ2UgPSAiRXJyb3IgLS0gVXNhZ2U6IFsgW0Rpc3BsYXlDb2RlP3R5cGU9Y2h1bmt8ZmlsZXxzbmlwcGV0fHRlbXBsYXRlJm5hbWU9TmFtZV0gXSI7DQokZXJyb3IgPSAiRXJyb3IgLS0gIiAuICR0eXBlIC4iICciIC4gJG5hbWUgLiAiJyBpcyBlaXRoZXIgYW4gaW52YWxpZCBuYW1lIG9yIGlzIGVtcHR5LiI7DQoNCi8vIFNldCBmaWVsZHNldCBhbWQgbGVnZW5kIHN0eWxlcyAoY2FuIGJlIGlubGluZSBzdHlsZSBvciByZWZlcmVuY2UgdG8gc3R5bGVzaGVldCBjb21wb25lbnRzKQ0KLy8gJGZpZWxkc2V0Q1NTID0gImNsYXNzPSdjb250ZW50YXJlYSciOyAvLyBleGFtcGxlIHVzaW5nIGEgQ1NTIGNsYXNzDQokZmllbGRzZXRDU1MgPSAic3R5bGU9J2JhY2tncm91bmQtY29sb3I6I2ZmZmZmZjsgYm9yZGVyOjFweCBzb2xpZCAjMDAwMDAwOyciOw0KJGxlZ2VuZENTUyA9ICJzdHlsZT0nYmFja2dyb3VuZC1jb2xvcjojZmZmZmZmOyBib3JkZXI6MXB4IHNvbGlkICMwMDAwMDA7JyI7DQoNCi8vIERlZmluZSB3aGljaCBFdG9taXRlIHRhZ3MgdG8gYmUgcmVuZGVyZWQgbm9uLWZ1bmN0aW9uYWwgaW4gdGhlIHJldHVybmVkIGNvZGUNCi8vICRvbGR0YWdzIGFyZSBsaXN0ZWQgaW4gdGhlaXIgb3JpZ2luYWwgZm9ybWF0DQokb2xkdGFncyA9IGFycmF5KCJbWyIsIlshIiwiWyoiLCJbKCIsIlt+Iiwie3siLCJbXiIpOw0KLy8gJG5ld3RhZ3MgYXJlIGxpc3RlZCB3aXRoIGEgYmxhbmsgc3BhY2UgYmV0d2VlbiB0YWcgZWxlbWVudHMNCiRuZXd0YWdzID0gYXJyYXkoIlsgWyIsIlsgISIsIlsgKiIsIlsgKCIsIlsgfiIsInsgeyIsIlsgXiIpOw0KDQovLyBJZiBDaHVuayBvciBUZW1wbGF0ZQ0KaWYoKCR0eXBlID09ICJ0ZW1wbGF0ZSIpIHx8ICgkdHlwZSA9PSAiY2h1bmsiKSkNCnsNCiAgaWYoJG5hbWUgPT0gJycpDQogIHsNCiAgICByZXR1cm4gJHVzYWdlOw0KICB9DQogIGVsc2UNCiAgew0KICAgIC8vIFNldCB0aGUgYXBwcm9wcmlhdGUgZmllbGQgdG8gZXh0cmFjdCBmcm9tIHRoZSByZWNvcmQNCiAgICAkZmllbGQgPSAoJHR5cGUgPT0gInRlbXBsYXRlIikgPyAiY29udGVudCIgOiAic25pcHBldCI7DQogICAgLy8gUXVlcnkgdGhlIGFwcHJvcHJpYXRlIGRhdGFiYXNlIHRhYmxlIGZvciB0aGUgZGVzaXJlZCByZWNvcmQNCiAgICBpZigkdHlwZSA9PSAidGVtcGxhdGUiKQ0KICAgIHsNCiAgICAgICRycyA9ICRldG9taXRlLT5nZXRJbnRUYWJsZVJvd3MoJGZpZWxkLCJzaXRlX3RlbXBsYXRlcyIsInRlbXBsYXRlbmFtZT0nJG5hbWUnIik7DQogICAgfQ0KICAgIGVsc2VpZigkdHlwZSA9PSAiY2h1bmsiKQ0KICAgIHsNCiAgICAgICRycyA9ICRldG9taXRlLT5nZXRJbnRUYWJsZVJvd3MoJGZpZWxkLCJzaXRlX2h0bWxzbmlwcGV0cyIsIm5hbWU9JyRuYW1lJyIpOw0KICAgIH0NCiAgICAvLyBJZiBhIHJlY29yZCB3YXMgcmV0dXJuZWQgdGhlbiBnZXQgdGhlIGNvZGUNCiAgICBpZihpc19hcnJheSgkcnMpKQ0KICAgIHsNCiAgICAgICRjb2RlID0gc3RyX3JlcGxhY2UoJG9sZHRhZ3MsICRuZXd0YWdzLCRyc1swXVskZmllbGRdKTsNCiAgICAgICRjb2RlID0gIjxkaXYgY2xhc3M9XCJjb2RlXCI+Ii5ubDJicihzdHJfcmVwbGFjZSgiICIsIiZuYnNwOyIsaHRtbGVudGl0aWVzKCRjb2RlKSkpLiI8L2Rpdj4iOw0KICAgIH0NCiAgICBlbHNlDQogICAgew0KICAgICAgcmV0dXJuICRlcnJvcjsNCiAgICB9DQogIH0NCn0NCg0KLy8gSWYgU25pcHBldA0KaWYoJHR5cGUgPT0gInNuaXBwZXQiKQ0Kew0KICBpZigkbmFtZSA9PSAnJykNCiAgew0KICAgIHJldHVybiAkdXNhZ2U7DQogIH0NCiAgZWxzZQ0KICB7DQogICAgLy8gQ2FjaGUgc25pcHBldCBjb2RlIGludG8gYSB2YXJpYWJsZQ0KICAgICRycyA9ICRldG9taXRlLT5nZXRJbnRUYWJsZVJvd3MoInNuaXBwZXQiLCJzaXRlX3NuaXBwZXRzIiwibmFtZT0nJG5hbWUnIik7DQogICAgLy8gSWYgc25pcHBldCBjb2RlIGlzIG5vdCBmb3VuZCwgZGlzcGxheSBtZXNzYWdlDQogICAgaWYoIWlzX2FycmF5KCRycykpDQogICAgew0KICAgICAgcmV0dXJuICRlcnJvcjsNCiAgICB9DQogICAgLy8gSWYgc25pcHBldCBjb2RlIGV4aXN0cywgcHJvY2VzcyBpdCBmb3IgZGlzcGxheQ0KICAgIGVsc2UNCiAgICB7DQogICAgICAvLyBBZGQgUEhQIEJlZ2luIGFuZCBFbmQgdGFncyBhbmQgdXNlIGhpZ2hsaWdodF9zdHJpbmcoKSB0byBjb2xvcml6ZSB0aGUgY29kZQ0KICAgICAgJGNvZGUgPSBoaWdobGlnaHRfc3RyaW5nKCI8P3BocFxuIi5jaHIoMTMpLnN0cl9yZXBsYWNlKCRvbGR0YWdzLCAkbmV3dGFncywgJHJzWzBdWydzbmlwcGV0J10pLiI/PiIsIHRydWUpOw0KICAgICAgJGNvZGUgPSBzdHJfcmVwbGFjZSgiPGNvZGU+IiwiIiwkY29kZSk7DQogICAgICAkY29kZSA9IHN0cl9yZXBsYWNlKCI8L2NvZGU+IiwiIiwkY29kZSk7DQogICAgfQ0KICB9DQp9DQoNCi8vIElmIEZpbGUNCmlmKCR0eXBlID09ICJmaWxlIikNCnsNCiAgaWYoJG5hbWUgPT0gJycpDQogIHsNCiAgICByZXR1cm4gJHVzYWdlOw0KICB9DQogIGVsc2UNCiAgew0KICAgIC8vIElmIHNuaXBwZXQgY29kZSBpcyBub3QgZm91bmQsIGRpc3BsYXkgbWVzc2FnZQ0KICAgICRjb2RlID0gZmlsZV9nZXRfY29udGVudHMoJG5hbWUpOw0KICAgIGlmKCRjb2RlID09ICIiKQ0KICAgIHsNCiAgICAgIHJldHVybiAkZXJyb3I7DQogICAgfQ0KICAgIGVsc2UNCiAgICB7DQogICAgICAvLyBJZiB0aGlzIGlzIFBIUCB0aGVuIGhpZ2hsaWdodCB0aGUgY29kZQ0KICAgICAgaWYoKHN1YnN0cigkbmFtZSwtMykgPT0gInBocCIpIHx8IChzdWJzdHIoJG5hbWUsLTQpID09ICJwaHBzIikpDQogICAgICB7DQogICAgICAgICRjb2RlID0gaGlnaGxpZ2h0X3N0cmluZyhzdHJfcmVwbGFjZSgkb2xkdGFncywgJG5ld3RhZ3MsICRjb2RlKSwgdHJ1ZSk7DQogICAgICB9DQogICAgICAvLyBBbGwgb3RoZXIgY29kZSBnZXRzIHByb2Nlc3NlZCBmb3IgZGlzcGxheQ0KICAgICAgZWxzZQ0KICAgICAgew0KICAgICAgICAkY29kZSA9ICI8Y29kZT4iLnN0cl9yZXBsYWNlKCIgIiwiJm5ic3A7IixodG1sZW50aXRpZXMoc3RyX3JlcGxhY2UoJG9sZHRhZ3MsICRuZXd0YWdzLCRjb2RlKSkpLiI8L2NvZGU+IjsNCiAgICAgIH0NCiAgICB9DQogIH0NCn0NCg0KLy8gT3BlbiBhIGZpZWxkc2V0LCBpbnNlcnQgY29kZSwgYW5kIHJldHVybg0KJHR5cGUgPSB1Y2ZpcnN0KCR0eXBlKTsNCnJldHVybiAiPGZpZWxkc2V0PjxsZWdlbmQ+eyR0eXBlfTogeyRuYW1lfTwvbGVnZW5kPnskY29kZX08L2ZpZWxkc2V0PiI7DQo=';
?>